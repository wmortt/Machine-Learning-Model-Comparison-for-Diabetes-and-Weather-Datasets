{
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "3MgrMk23hADJ"
      },
      "source": [
        "# Machine Learning Assignment\n",
        "\n",
        "**Dataset**:       WEATHER CLASSIFICATION\n"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "yWuzbRFshADK"
      },
      "source": [
        "## Imports\n",
        "\n",
        "Add imports here as needed.\n",
        "\n",
        "Remember to **re-run the cell when you add imports**, so it gets loaded into the virtual notebook environment!"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "_0SJEM1ohADL"
      },
      "outputs": [],
      "source": [
        "# Data and Datasets\n",
        "import pandas as pd\n",
        "from sklearn.datasets import load_iris\n",
        "from sklearn.datasets import load_wine\n",
        "from sklearn.preprocessing import StandardScaler\n",
        "\n",
        "# Clustering\n",
        "from sklearn.cluster import DBSCAN\n",
        "\n",
        "# Validation methods\n",
        "from sklearn.model_selection import train_test_split\n",
        "from sklearn.model_selection import cross_val_score\n",
        "from sklearn.model_selection import cross_validate\n",
        "from sklearn.model_selection import StratifiedKFold\n",
        "\n",
        "# Metrics\n",
        "from sklearn import metrics\n",
        "from sklearn.metrics import make_scorer\n",
        "from sklearn.metrics import accuracy_score\n",
        "from sklearn.metrics import precision_score\n",
        "from sklearn.metrics import recall_score\n",
        "\n",
        "# Classifiers\n",
        "from sklearn.linear_model import LogisticRegression\n",
        "from sklearn import tree\n",
        "from sklearn.tree import DecisionTreeClassifier\n",
        "from sklearn.ensemble import RandomForestClassifier\n",
        "from sklearn.naive_bayes import GaussianNB\n",
        "from sklearn.naive_bayes import MultinomialNB\n",
        "from sklearn.naive_bayes import BernoulliNB\n",
        "from sklearn.neighbors import KNeighborsClassifier\n",
        "\n",
        "# Hyper-parameter optimisation\n",
        "from sklearn.model_selection import GridSearchCV\n",
        "from sklearn.model_selection import RandomizedSearchCV\n",
        "\n",
        "# Feature selection & feature engineering\n",
        "from sklearn.feature_selection import RFE\n",
        "from sklearn.feature_selection import RFECV\n",
        "from sklearn.decomposition import PCA\n",
        "\n",
        "# Stats\n",
        "from scipy.stats import randint as sp_randint\n",
        "from scipy.stats import pearsonr\n",
        "from scipy.stats import spearmanr\n",
        "from scipy.stats import shapiro     # Shapiro Wilk\n",
        "from scipy.stats import normaltest  # D’Agostino’s K^2\n",
        "from scipy.stats import anderson    # Anderson-Darling\n",
        "from scipy.stats import ttest_ind    # independent student t-test; assumes normality\n",
        "from scipy.stats import mannwhitneyu # non-parametric; doesn't assume normality\n",
        "\n",
        "# Visualisation\n",
        "import matplotlib.pyplot as plt\n",
        "import seaborn as sns\n",
        "from IPython.display import SVG\n",
        "from graphviz import Source\n",
        "from IPython.display import display\n",
        "from sklearn.tree import export_graphviz\n",
        "\n",
        "# Utils\n",
        "import pprint\n",
        "import numpy as np\n",
        "from time import time\n",
        "import openpyxl"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "iLT-XlVrhADM"
      },
      "source": [
        "## Loading the dataset"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "iJiNnrh6hYll",
        "outputId": "6898febe-a44a-4598-a38e-ccbcb64b16f5"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Mounted at /content/drive/\n"
          ]
        }
      ],
      "source": [
        "from google.colab import drive\n",
        "drive.mount('/content/drive/')"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 519
        },
        "id": "I2OH9cE-hADM",
        "outputId": "86781201-7372-441f-c061-2ef587d18361"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "<class 'pandas.core.frame.DataFrame'>\n",
            "RangeIndex: 13200 entries, 0 to 13199\n",
            "Data columns (total 10 columns):\n",
            " #   Column                Non-Null Count  Dtype  \n",
            "---  ------                --------------  -----  \n",
            " 0   temperature           10392 non-null  float64\n",
            " 1   humidity              12977 non-null  float64\n",
            " 2   wind_speed            12967 non-null  float64\n",
            " 3   precipitation         9099 non-null   float64\n",
            " 4   cloud_cover           12970 non-null  object \n",
            " 5   atmospheric_pressure  12961 non-null  float64\n",
            " 6   season                12962 non-null  object \n",
            " 7   visibility            12968 non-null  float64\n",
            " 8   location              12968 non-null  object \n",
            " 9   weather               13200 non-null  object \n",
            "dtypes: float64(6), object(4)\n",
            "memory usage: 1.0+ MB\n",
            "None\n"
          ]
        },
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "   temperature  humidity  wind_speed  precipitation    cloud_cover  \\\n",
              "0         14.0      73.0         9.5           82.0  partly cloudy   \n",
              "1         39.0      96.0         8.5           71.0  partly cloudy   \n",
              "2          NaN       0.0         7.0            NaN          clear   \n",
              "3         38.0      83.0         1.5           82.0          clear   \n",
              "4          NaN      74.0        17.0            NaN       overcast   \n",
              "\n",
              "   atmospheric_pressure  season  visibility  location weather  \n",
              "0               1010.82  Winter         3.5    inland   Rainy  \n",
              "1               1011.43  Spring        10.0    inland  Cloudy  \n",
              "2               1018.72  Spring         5.5  mountain   Sunny  \n",
              "3               1026.25  Spring         1.0   coastal   Sunny  \n",
              "4                990.67  Winter         2.5  mountain   Rainy  "
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-9ff60df8-65f2-4397-bee7-75962e14c925\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>temperature</th>\n",
              "      <th>humidity</th>\n",
              "      <th>wind_speed</th>\n",
              "      <th>precipitation</th>\n",
              "      <th>cloud_cover</th>\n",
              "      <th>atmospheric_pressure</th>\n",
              "      <th>season</th>\n",
              "      <th>visibility</th>\n",
              "      <th>location</th>\n",
              "      <th>weather</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>14.0</td>\n",
              "      <td>73.0</td>\n",
              "      <td>9.5</td>\n",
              "      <td>82.0</td>\n",
              "      <td>partly cloudy</td>\n",
              "      <td>1010.82</td>\n",
              "      <td>Winter</td>\n",
              "      <td>3.5</td>\n",
              "      <td>inland</td>\n",
              "      <td>Rainy</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>39.0</td>\n",
              "      <td>96.0</td>\n",
              "      <td>8.5</td>\n",
              "      <td>71.0</td>\n",
              "      <td>partly cloudy</td>\n",
              "      <td>1011.43</td>\n",
              "      <td>Spring</td>\n",
              "      <td>10.0</td>\n",
              "      <td>inland</td>\n",
              "      <td>Cloudy</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>NaN</td>\n",
              "      <td>0.0</td>\n",
              "      <td>7.0</td>\n",
              "      <td>NaN</td>\n",
              "      <td>clear</td>\n",
              "      <td>1018.72</td>\n",
              "      <td>Spring</td>\n",
              "      <td>5.5</td>\n",
              "      <td>mountain</td>\n",
              "      <td>Sunny</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>38.0</td>\n",
              "      <td>83.0</td>\n",
              "      <td>1.5</td>\n",
              "      <td>82.0</td>\n",
              "      <td>clear</td>\n",
              "      <td>1026.25</td>\n",
              "      <td>Spring</td>\n",
              "      <td>1.0</td>\n",
              "      <td>coastal</td>\n",
              "      <td>Sunny</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>NaN</td>\n",
              "      <td>74.0</td>\n",
              "      <td>17.0</td>\n",
              "      <td>NaN</td>\n",
              "      <td>overcast</td>\n",
              "      <td>990.67</td>\n",
              "      <td>Winter</td>\n",
              "      <td>2.5</td>\n",
              "      <td>mountain</td>\n",
              "      <td>Rainy</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-9ff60df8-65f2-4397-bee7-75962e14c925')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-9ff60df8-65f2-4397-bee7-75962e14c925 button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-9ff60df8-65f2-4397-bee7-75962e14c925');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "<div id=\"df-1b9cf695-5f28-4a3c-b975-3f866dd67b41\">\n",
              "  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-1b9cf695-5f28-4a3c-b975-3f866dd67b41')\"\n",
              "            title=\"Suggest charts\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "  </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "  <script>\n",
              "    async function quickchart(key) {\n",
              "      const quickchartButtonEl =\n",
              "        document.querySelector('#' + key + ' button');\n",
              "      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "      quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "      try {\n",
              "        const charts = await google.colab.kernel.invokeFunction(\n",
              "            'suggestCharts', [key], {});\n",
              "      } catch (error) {\n",
              "        console.error('Error during call to suggestCharts:', error);\n",
              "      }\n",
              "      quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "    }\n",
              "    (() => {\n",
              "      let quickchartButtonEl =\n",
              "        document.querySelector('#df-1b9cf695-5f28-4a3c-b975-3f866dd67b41 button');\n",
              "      quickchartButtonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "    })();\n",
              "  </script>\n",
              "</div>\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe",
              "variable_name": "df",
              "summary": "{\n  \"name\": \"df\",\n  \"rows\": 13200,\n  \"fields\": [\n    {\n      \"column\": \"temperature\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 17.367760683991573,\n        \"min\": -25.0,\n        \"max\": 108.0,\n        \"num_unique_values\": 123,\n        \"samples\": [\n          40.0,\n          46.0,\n          34.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"humidity\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 24.75331613237946,\n        \"min\": 0.0,\n        \"max\": 109.0,\n        \"num_unique_values\": 91,\n        \"samples\": [\n          84.0,\n          57.0,\n          38.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"wind_speed\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 6.90634604989963,\n        \"min\": 0.0,\n        \"max\": 48.5,\n        \"num_unique_values\": 97,\n        \"samples\": [\n          26.5,\n          5.0,\n          47.5\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"precipitation\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 31.96168695706231,\n        \"min\": 0.0,\n        \"max\": 109.0,\n        \"num_unique_values\": 110,\n        \"samples\": [\n          74.0,\n          46.0,\n          96.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"cloud_cover\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 4,\n        \"samples\": [\n          \"clear\",\n          \"cloudy\",\n          \"partly cloudy\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"atmospheric_pressure\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 37.1902891503,\n        \"min\": 800.12,\n        \"max\": 1199.21,\n        \"num_unique_values\": 5415,\n        \"samples\": [\n          1003.36,\n          995.5,\n          1008.73\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"season\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 4,\n        \"samples\": [\n          \"Spring\",\n          \"Autumn\",\n          \"Winter\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"visibility\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 3.3713219040297093,\n        \"min\": 0.0,\n        \"max\": 20.0,\n        \"num_unique_values\": 41,\n        \"samples\": [\n          11.0,\n          9.5,\n          1.5\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"location\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 3,\n        \"samples\": [\n          \"inland\",\n          \"mountain\",\n          \"coastal\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"weather\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 4,\n        \"samples\": [\n          \"Cloudy\",\n          \"Snowy\",\n          \"Rainy\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"
            }
          },
          "metadata": {},
          "execution_count": 4
        }
      ],
      "source": [
        "import pandas as pd\n",
        "\n",
        "df = pd.read_csv('/content/drive/MyDrive/Assignment 2 - Machine Learning/Data/weather_dataset.csv')\n",
        "\n",
        "# printing out dataset info\n",
        "print(df.info())\n",
        "df.head()"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 301
        },
        "id": "VKawdlR6hADN",
        "outputId": "8b2077ce-e9a9-4eb6-cba0-6bfdee86a714"
      },
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "        temperature      humidity    wind_speed  precipitation   cloud_cover  \\\n",
              "count  13200.000000  13200.000000  13200.000000   13200.000000  13200.000000   \n",
              "mean      15.265348     54.720332      7.511025      42.218490      2.023409   \n",
              "std       13.521375     31.951473      6.004698      30.243369      1.038605   \n",
              "min      -16.000000      0.000000      0.000000       0.000000      0.000000   \n",
              "25%        0.000000     34.000000      2.000000      11.000000      2.000000   \n",
              "50%       19.148768     64.000000      7.000000      53.639081      2.000000   \n",
              "75%       25.000000     78.000000     11.500000      58.000000      3.000000   \n",
              "max       65.000000    109.000000     38.000000     109.000000      4.000000   \n",
              "\n",
              "       atmospheric_pressure        season    visibility      location  \\\n",
              "count          13200.000000  13200.000000  13200.000000  13200.000000   \n",
              "mean            1005.882164      1.887727      4.214577      1.127955   \n",
              "std               36.852041      1.189443      2.977979      0.823866   \n",
              "min              800.120000      0.000000      0.000000      0.000000   \n",
              "25%              995.070000      1.000000      1.500000      0.000000   \n",
              "50%             1007.270000      2.000000      4.000000      1.000000   \n",
              "75%             1016.650000      3.000000      6.500000      2.000000   \n",
              "max             1199.210000      4.000000     18.500000      3.000000   \n",
              "\n",
              "            weather       cluster  \n",
              "count  13200.000000  13200.000000  \n",
              "mean       1.500000      0.303864  \n",
              "std        1.118076      1.091267  \n",
              "min        0.000000      0.000000  \n",
              "25%        0.750000      0.000000  \n",
              "50%        1.500000      0.000000  \n",
              "75%        2.250000      0.000000  \n",
              "max        3.000000     19.000000  "
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-b85803ea-269e-4a03-bf8c-2ec89555d4e6\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>temperature</th>\n",
              "      <th>humidity</th>\n",
              "      <th>wind_speed</th>\n",
              "      <th>precipitation</th>\n",
              "      <th>cloud_cover</th>\n",
              "      <th>atmospheric_pressure</th>\n",
              "      <th>season</th>\n",
              "      <th>visibility</th>\n",
              "      <th>location</th>\n",
              "      <th>weather</th>\n",
              "      <th>cluster</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>count</th>\n",
              "      <td>13200.000000</td>\n",
              "      <td>13200.000000</td>\n",
              "      <td>13200.000000</td>\n",
              "      <td>13200.000000</td>\n",
              "      <td>13200.000000</td>\n",
              "      <td>13200.000000</td>\n",
              "      <td>13200.000000</td>\n",
              "      <td>13200.000000</td>\n",
              "      <td>13200.000000</td>\n",
              "      <td>13200.000000</td>\n",
              "      <td>13200.000000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>mean</th>\n",
              "      <td>15.265348</td>\n",
              "      <td>54.720332</td>\n",
              "      <td>7.511025</td>\n",
              "      <td>42.218490</td>\n",
              "      <td>2.023409</td>\n",
              "      <td>1005.882164</td>\n",
              "      <td>1.887727</td>\n",
              "      <td>4.214577</td>\n",
              "      <td>1.127955</td>\n",
              "      <td>1.500000</td>\n",
              "      <td>0.303864</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>std</th>\n",
              "      <td>13.521375</td>\n",
              "      <td>31.951473</td>\n",
              "      <td>6.004698</td>\n",
              "      <td>30.243369</td>\n",
              "      <td>1.038605</td>\n",
              "      <td>36.852041</td>\n",
              "      <td>1.189443</td>\n",
              "      <td>2.977979</td>\n",
              "      <td>0.823866</td>\n",
              "      <td>1.118076</td>\n",
              "      <td>1.091267</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>min</th>\n",
              "      <td>-16.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>800.120000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.000000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>25%</th>\n",
              "      <td>0.000000</td>\n",
              "      <td>34.000000</td>\n",
              "      <td>2.000000</td>\n",
              "      <td>11.000000</td>\n",
              "      <td>2.000000</td>\n",
              "      <td>995.070000</td>\n",
              "      <td>1.000000</td>\n",
              "      <td>1.500000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.750000</td>\n",
              "      <td>0.000000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>50%</th>\n",
              "      <td>19.148768</td>\n",
              "      <td>64.000000</td>\n",
              "      <td>7.000000</td>\n",
              "      <td>53.639081</td>\n",
              "      <td>2.000000</td>\n",
              "      <td>1007.270000</td>\n",
              "      <td>2.000000</td>\n",
              "      <td>4.000000</td>\n",
              "      <td>1.000000</td>\n",
              "      <td>1.500000</td>\n",
              "      <td>0.000000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>75%</th>\n",
              "      <td>25.000000</td>\n",
              "      <td>78.000000</td>\n",
              "      <td>11.500000</td>\n",
              "      <td>58.000000</td>\n",
              "      <td>3.000000</td>\n",
              "      <td>1016.650000</td>\n",
              "      <td>3.000000</td>\n",
              "      <td>6.500000</td>\n",
              "      <td>2.000000</td>\n",
              "      <td>2.250000</td>\n",
              "      <td>0.000000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>max</th>\n",
              "      <td>65.000000</td>\n",
              "      <td>109.000000</td>\n",
              "      <td>38.000000</td>\n",
              "      <td>109.000000</td>\n",
              "      <td>4.000000</td>\n",
              "      <td>1199.210000</td>\n",
              "      <td>4.000000</td>\n",
              "      <td>18.500000</td>\n",
              "      <td>3.000000</td>\n",
              "      <td>3.000000</td>\n",
              "      <td>19.000000</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-b85803ea-269e-4a03-bf8c-2ec89555d4e6')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-b85803ea-269e-4a03-bf8c-2ec89555d4e6 button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-b85803ea-269e-4a03-bf8c-2ec89555d4e6');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "<div id=\"df-8f827a11-5769-4179-bac7-897236e0aecb\">\n",
              "  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-8f827a11-5769-4179-bac7-897236e0aecb')\"\n",
              "            title=\"Suggest charts\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "  </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "  <script>\n",
              "    async function quickchart(key) {\n",
              "      const quickchartButtonEl =\n",
              "        document.querySelector('#' + key + ' button');\n",
              "      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "      quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "      try {\n",
              "        const charts = await google.colab.kernel.invokeFunction(\n",
              "            'suggestCharts', [key], {});\n",
              "      } catch (error) {\n",
              "        console.error('Error during call to suggestCharts:', error);\n",
              "      }\n",
              "      quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "    }\n",
              "    (() => {\n",
              "      let quickchartButtonEl =\n",
              "        document.querySelector('#df-8f827a11-5769-4179-bac7-897236e0aecb button');\n",
              "      quickchartButtonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "    })();\n",
              "  </script>\n",
              "</div>\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe",
              "summary": "{\n  \"name\": \"df\",\n  \"rows\": 8,\n  \"fields\": [\n    {\n      \"column\": \"temperature\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 4660.803776168587,\n        \"min\": -16.0,\n        \"max\": 13200.0,\n        \"num_unique_values\": 8,\n        \"samples\": [\n          15.265348374040636,\n          19.148768283294842,\n          13200.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"humidity\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 4648.247715357445,\n        \"min\": 0.0,\n        \"max\": 13200.0,\n        \"num_unique_values\": 8,\n        \"samples\": [\n          54.720331629853284,\n          64.0,\n          13200.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"wind_speed\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 4663.28243609268,\n        \"min\": 0.0,\n        \"max\": 13200.0,\n        \"num_unique_values\": 8,\n        \"samples\": [\n          7.5110252073445185,\n          7.0,\n          13200.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"precipitation\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 4651.6640254177355,\n        \"min\": 0.0,\n        \"max\": 13200.0,\n        \"num_unique_values\": 8,\n        \"samples\": [\n          42.21849010214243,\n          53.63908121771623,\n          13200.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"cloud_cover\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 4666.194668781703,\n        \"min\": 0.0,\n        \"max\": 13200.0,\n        \"num_unique_values\": 7,\n        \"samples\": [\n          13200.0,\n          2.023409090909091,\n          3.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"atmospheric_pressure\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 4375.194067284746,\n        \"min\": 36.852040629215644,\n        \"max\": 13200.0,\n        \"num_unique_values\": 8,\n        \"samples\": [\n          1005.8821641848623,\n          1007.27,\n          13200.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"season\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 4666.244420450745,\n        \"min\": 0.0,\n        \"max\": 13200.0,\n        \"num_unique_values\": 8,\n        \"samples\": [\n          1.8877272727272727,\n          2.0,\n          13200.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"visibility\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 4665.0044611321855,\n        \"min\": 0.0,\n        \"max\": 13200.0,\n        \"num_unique_values\": 8,\n        \"samples\": [\n          4.214576860523806,\n          4.0,\n          13200.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"location\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 4666.503234145809,\n        \"min\": 0.0,\n        \"max\": 13200.0,\n        \"num_unique_values\": 7,\n        \"samples\": [\n          13200.0,\n          1.1279545454545454,\n          2.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"weather\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 4666.393803818901,\n        \"min\": 0.0,\n        \"max\": 13200.0,\n        \"num_unique_values\": 7,\n        \"samples\": [\n          13200.0,\n          1.5,\n          2.25\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"cluster\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 4665.8792825863575,\n        \"min\": 0.0,\n        \"max\": 13200.0,\n        \"num_unique_values\": 5,\n        \"samples\": [\n          0.3038636363636364,\n          19.0,\n          1.0912667721545226\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"
            }
          },
          "metadata": {},
          "execution_count": 23
        }
      ],
      "source": [
        "df.describe()"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "wvvx6lmGs7Yn",
        "outputId": "cbdf1f50-a421-45ee-ab14-ea316eed014e"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "<class 'pandas.core.frame.DataFrame'>\n",
            "RangeIndex: 13200 entries, 0 to 13199\n",
            "Data columns (total 11 columns):\n",
            " #   Column                Non-Null Count  Dtype  \n",
            "---  ------                --------------  -----  \n",
            " 0   temperature           13200 non-null  float64\n",
            " 1   humidity              13200 non-null  float64\n",
            " 2   wind_speed            13200 non-null  float64\n",
            " 3   precipitation         13200 non-null  float64\n",
            " 4   cloud_cover           13200 non-null  float64\n",
            " 5   atmospheric_pressure  13200 non-null  float64\n",
            " 6   season                13200 non-null  float64\n",
            " 7   visibility            13200 non-null  float64\n",
            " 8   location              13200 non-null  float64\n",
            " 9   weather               13200 non-null  float64\n",
            " 10  cluster               13200 non-null  int64  \n",
            "dtypes: float64(10), int64(1)\n",
            "memory usage: 1.1 MB\n"
          ]
        }
      ],
      "source": [
        "df.info()"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "63_nbj47hADN"
      },
      "source": [
        "## Exploratory data analysis\n",
        "\n",
        "Section for exploratory data analysis, to address **Tasks 1.1 and 1.2**.\n",
        "\n",
        "**OBS:** You may need to do some data cleaning before you do your full exploratory data analysis, though you will find that some functions we'll cover in this unit are able to handle things like missing values and non-numeric data.\n",
        "\n",
        "**Create more cells as needed!**"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 424
        },
        "id": "unCQ1qPnZGqZ",
        "outputId": "6060b966-8b34-48db-9eb1-7a6fdf59fcfe"
      },
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "       temperature  humidity  wind_speed  precipitation  cloud_cover  \\\n",
              "0            False     False       False          False        False   \n",
              "1            False     False       False          False        False   \n",
              "2            False     False       False          False        False   \n",
              "3            False     False       False          False        False   \n",
              "4            False     False       False          False        False   \n",
              "...            ...       ...         ...            ...          ...   \n",
              "13195        False     False       False          False        False   \n",
              "13196        False     False       False          False        False   \n",
              "13197        False     False       False          False        False   \n",
              "13198        False     False       False          False        False   \n",
              "13199        False     False       False          False        False   \n",
              "\n",
              "       atmospheric_pressure  season  visibility  location  weather  cluster  \n",
              "0                     False   False       False     False    False    False  \n",
              "1                     False   False       False     False    False    False  \n",
              "2                     False   False       False     False    False    False  \n",
              "3                     False   False       False     False    False    False  \n",
              "4                     False   False       False     False    False    False  \n",
              "...                     ...     ...         ...       ...      ...      ...  \n",
              "13195                 False   False       False     False    False    False  \n",
              "13196                 False   False       False     False    False    False  \n",
              "13197                 False   False       False     False    False    False  \n",
              "13198                 False   False       False     False    False    False  \n",
              "13199                 False   False       False     False    False    False  \n",
              "\n",
              "[13200 rows x 11 columns]"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-7b2b38b5-4ba4-4b81-92ea-fb91bb04fb5c\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>temperature</th>\n",
              "      <th>humidity</th>\n",
              "      <th>wind_speed</th>\n",
              "      <th>precipitation</th>\n",
              "      <th>cloud_cover</th>\n",
              "      <th>atmospheric_pressure</th>\n",
              "      <th>season</th>\n",
              "      <th>visibility</th>\n",
              "      <th>location</th>\n",
              "      <th>weather</th>\n",
              "      <th>cluster</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>...</th>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>13195</th>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>13196</th>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>13197</th>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>13198</th>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>13199</th>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "<p>13200 rows × 11 columns</p>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-7b2b38b5-4ba4-4b81-92ea-fb91bb04fb5c')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-7b2b38b5-4ba4-4b81-92ea-fb91bb04fb5c button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-7b2b38b5-4ba4-4b81-92ea-fb91bb04fb5c');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "<div id=\"df-5dad3432-c047-4e10-bc34-d95a5fe25a6f\">\n",
              "  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-5dad3432-c047-4e10-bc34-d95a5fe25a6f')\"\n",
              "            title=\"Suggest charts\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "  </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "  <script>\n",
              "    async function quickchart(key) {\n",
              "      const quickchartButtonEl =\n",
              "        document.querySelector('#' + key + ' button');\n",
              "      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "      quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "      try {\n",
              "        const charts = await google.colab.kernel.invokeFunction(\n",
              "            'suggestCharts', [key], {});\n",
              "      } catch (error) {\n",
              "        console.error('Error during call to suggestCharts:', error);\n",
              "      }\n",
              "      quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "    }\n",
              "    (() => {\n",
              "      let quickchartButtonEl =\n",
              "        document.querySelector('#df-5dad3432-c047-4e10-bc34-d95a5fe25a6f button');\n",
              "      quickchartButtonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "    })();\n",
              "  </script>\n",
              "</div>\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe",
              "summary": "{\n  \"name\": \"df\",\n  \"rows\": 13200,\n  \"fields\": [\n    {\n      \"column\": \"temperature\",\n      \"properties\": {\n        \"dtype\": \"boolean\",\n        \"num_unique_values\": 1,\n        \"samples\": [\n          false\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"humidity\",\n      \"properties\": {\n        \"dtype\": \"boolean\",\n        \"num_unique_values\": 1,\n        \"samples\": [\n          false\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"wind_speed\",\n      \"properties\": {\n        \"dtype\": \"boolean\",\n        \"num_unique_values\": 1,\n        \"samples\": [\n          false\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"precipitation\",\n      \"properties\": {\n        \"dtype\": \"boolean\",\n        \"num_unique_values\": 1,\n        \"samples\": [\n          false\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"cloud_cover\",\n      \"properties\": {\n        \"dtype\": \"boolean\",\n        \"num_unique_values\": 1,\n        \"samples\": [\n          false\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"atmospheric_pressure\",\n      \"properties\": {\n        \"dtype\": \"boolean\",\n        \"num_unique_values\": 1,\n        \"samples\": [\n          false\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"season\",\n      \"properties\": {\n        \"dtype\": \"boolean\",\n        \"num_unique_values\": 1,\n        \"samples\": [\n          false\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"visibility\",\n      \"properties\": {\n        \"dtype\": \"boolean\",\n        \"num_unique_values\": 1,\n        \"samples\": [\n          false\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"location\",\n      \"properties\": {\n        \"dtype\": \"boolean\",\n        \"num_unique_values\": 1,\n        \"samples\": [\n          false\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"weather\",\n      \"properties\": {\n        \"dtype\": \"boolean\",\n        \"num_unique_values\": 1,\n        \"samples\": [\n          false\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"cluster\",\n      \"properties\": {\n        \"dtype\": \"boolean\",\n        \"num_unique_values\": 1,\n        \"samples\": [\n          false\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"
            }
          },
          "metadata": {},
          "execution_count": 25
        }
      ],
      "source": [
        "df.isnull()"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 430
        },
        "id": "iR1ldnPMZKiR",
        "outputId": "ec8cf08c-4a53-4630-f61d-21d77c805d94"
      },
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "temperature             0\n",
              "humidity                0\n",
              "wind_speed              0\n",
              "precipitation           0\n",
              "cloud_cover             0\n",
              "atmospheric_pressure    0\n",
              "season                  0\n",
              "visibility              0\n",
              "location                0\n",
              "weather                 0\n",
              "cluster                 0\n",
              "dtype: int64"
            ],
            "text/html": [
              "<div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>0</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>temperature</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>humidity</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>wind_speed</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>precipitation</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>cloud_cover</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>atmospheric_pressure</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>season</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>visibility</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>location</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>weather</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>cluster</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div><br><label><b>dtype:</b> int64</label>"
            ]
          },
          "metadata": {},
          "execution_count": 26
        }
      ],
      "source": [
        "df.isnull().sum()"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "NVc3CPJgiJYA",
        "outputId": "9c6ed9ae-377e-45fb-8877-128ad2b05e45"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "\n",
            "Information about the class\n",
            "\n",
            "count    13200.000000\n",
            "mean         1.500000\n",
            "std          1.118076\n",
            "min          0.000000\n",
            "25%          0.750000\n",
            "50%          1.500000\n",
            "75%          2.250000\n",
            "max          3.000000\n",
            "Name: weather, dtype: float64 \n",
            "\n",
            "weather\n",
            "1.0    3300\n",
            "0.0    3300\n",
            "3.0    3300\n",
            "2.0    3300\n",
            "Name: count, dtype: int64\n"
          ]
        }
      ],
      "source": [
        "print(\"\\nInformation about the class\\n\")\n",
        "print(df['weather'].describe(),\"\\n\")\n",
        "print(df['weather'].value_counts())"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 495
        },
        "id": "bfnxvogiNOuu",
        "outputId": "3222e317-12c6-4534-821f-43726f12cae2"
      },
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "<Axes: >"
            ]
          },
          "metadata": {},
          "execution_count": 28
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 640x480 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ],
      "source": [
        "plt.figure()\n",
        "plt.suptitle('Missing Values In Rows')\n",
        "plt.xlabel('Values')\n",
        "df.isnull().sum(axis=1).value_counts().sort_index(ascending=False).plot(kind=\"barh\")"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 148
        },
        "id": "x79RjW2hXwW_",
        "outputId": "a007b7d4-93c5-4ce9-a951-84ddd8f9f630"
      },
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "False    13068\n",
              "True       132\n",
              "Name: count, dtype: int64"
            ],
            "text/html": [
              "<div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>count</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>False</th>\n",
              "      <td>13068</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>True</th>\n",
              "      <td>132</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div><br><label><b>dtype:</b> int64</label>"
            ]
          },
          "metadata": {},
          "execution_count": 29
        }
      ],
      "source": [
        "df.duplicated().value_counts()"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 428
        },
        "id": "FmBFRlFSYCzw",
        "outputId": "d918c631-3fa9-43ac-dae0-8079cfa4e88a"
      },
      "outputs": [
        {
          "data": {
            "image/png": "\n",
            "text/plain": [
              "<Figure size 640x480 with 1 Axes>"
            ]
          },
          "metadata": {},
          "output_type": "display_data"
        }
      ],
      "source": [
        "plt.figure()\n",
        "df['weather'].value_counts().plot(kind=\"pie\", autopct='%1.1f%%', startangle=90)\n",
        "\n",
        "plt.title('Weather Status Distribution')\n",
        "\n",
        "plt.show()"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 483
        },
        "id": "Qtv5UoK7YVUG",
        "outputId": "851e508b-f748-47f3-a72c-b9fb415eb1b6"
      },
      "outputs": [
        {
          "data": {
            "image/png": "\n",
            "text/plain": [
              "<Figure size 640x480 with 1 Axes>"
            ]
          },
          "metadata": {},
          "output_type": "display_data"
        }
      ],
      "source": [
        "plt.figure();\n",
        "df['weather'].value_counts().plot(kind=\"bar\", color='lightgreen', edgecolor='black');"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 646
        },
        "id": "17QxVDLjYKof",
        "outputId": "541653b9-6356-404c-8718-726e2b7be734"
      },
      "outputs": [
        {
          "name": "stderr",
          "output_type": "stream",
          "text": [
            "<ipython-input-13-53f723bf0625>:4: FutureWarning: \n",
            "\n",
            "Passing `palette` without assigning `hue` is deprecated and will be removed in v0.14.0. Assign the `x` variable to `hue` and set `legend=False` for the same effect.\n",
            "\n",
            "  sns.barplot(x=missing_values.index, y=missing_values.values, palette='coolwarm')\n"
          ]
        },
        {
          "data": {
            "text/plain": [
              "<Axes: xlabel='None'>"
            ]
          },
          "execution_count": 13,
          "metadata": {},
          "output_type": "execute_result"
        },
        {
          "data": {
            "image/png": "\n",
            "text/plain": [
              "<Figure size 1500x600 with 1 Axes>"
            ]
          },
          "metadata": {},
          "output_type": "display_data"
        }
      ],
      "source": [
        "df.isnull().sum()\n",
        "missing_values = df.isnull().sum()\n",
        "plt.figure(figsize=(15, 6))\n",
        "sns.barplot(x=missing_values.index, y=missing_values.values, palette='coolwarm')"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 487
        },
        "id": "uKOnbvs2hADO",
        "outputId": "9dc70e58-2b1f-4e6e-a786-d3b32b618bfc"
      },
      "outputs": [
        {
          "data": {
            "text/plain": [
              "Text(0, 0.5, '')"
            ]
          },
          "execution_count": 14,
          "metadata": {},
          "output_type": "execute_result"
        },
        {
          "data": {
            "text/plain": [
              "<Figure size 640x480 with 0 Axes>"
            ]
          },
          "metadata": {},
          "output_type": "display_data"
        },
        {
          "data": {
            "image/png": "\n",
            "text/plain": [
              "<Figure size 640x480 with 1 Axes>"
            ]
          },
          "metadata": {},
          "output_type": "display_data"
        }
      ],
      "source": [
        "plt.figure();\n",
        "\n",
        "color = {'boxes' : 'black', 'whiskers' : 'red', 'medians' : 'blue', 'caps' : 'green'}\n",
        "\n",
        "box_plot =df[['temperature', 'humidity', 'wind_speed', 'precipitation', 'visibility']].plot.box(color=color, sym='r+');\n",
        "box_plot.set_title('Box Plot of weather, wind speed, rain, precipitation and visibility');\n",
        "box_plot.set_ylabel('')"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 483
        },
        "id": "Hrvio1ZxqQar",
        "outputId": "dd9211e5-3079-469d-d142-9f6bd0c44c08"
      },
      "outputs": [
        {
          "data": {
            "image/png": "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\n",
            "text/plain": [
              "<Figure size 640x480 with 1 Axes>"
            ]
          },
          "metadata": {},
          "output_type": "display_data"
        }
      ],
      "source": [
        "plt.figure();\n",
        "df['weather'].value_counts().plot(kind=\"bar\", color='lightgreen', edgecolor='black');"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "s9wNQIwCyNM1",
        "outputId": "4643942c-62a6-46d1-d2eb-bb32df77c9cc"
      },
      "outputs": [
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "                      temperature  humidity  wind_speed  precipitation  \\\n",
            "temperature              1.000000 -0.161793   -0.063858      -0.285814   \n",
            "humidity                -0.161793  1.000000    0.324629       0.500473   \n",
            "wind_speed              -0.063858  0.324629    1.000000       0.448904   \n",
            "precipitation           -0.285814  0.500473    0.448904       1.000000   \n",
            "atmospheric_pressure     0.211917 -0.098380   -0.078249      -0.181491   \n",
            "visibility               0.260524 -0.375891   -0.311435      -0.464729   \n",
            "\n",
            "                      atmospheric_pressure  visibility  \n",
            "temperature                       0.211917    0.260524  \n",
            "humidity                         -0.098380   -0.375891  \n",
            "wind_speed                       -0.078249   -0.311435  \n",
            "precipitation                    -0.181491   -0.464729  \n",
            "atmospheric_pressure              1.000000    0.120018  \n",
            "visibility                        0.120018    1.000000  \n",
            "\n",
            "                       temperature  humidity  wind_speed  precipitation  \\\n",
            "temperature              1.000000 -0.244566   -0.123629      -0.330011   \n",
            "humidity                -0.244566  1.000000    0.374775       0.584030   \n",
            "wind_speed              -0.123629  0.374775    1.000000       0.435955   \n",
            "precipitation           -0.330011  0.584030    0.435955       1.000000   \n",
            "atmospheric_pressure     0.546396 -0.342529   -0.228653      -0.458804   \n",
            "visibility               0.370623 -0.487548   -0.360438      -0.565240   \n",
            "\n",
            "                      atmospheric_pressure  visibility  \n",
            "temperature                       0.546396    0.370623  \n",
            "humidity                         -0.342529   -0.487548  \n",
            "wind_speed                       -0.228653   -0.360438  \n",
            "precipitation                    -0.458804   -0.565240  \n",
            "atmospheric_pressure              1.000000    0.448643  \n",
            "visibility                        0.448643    1.000000  \n"
          ]
        }
      ],
      "source": [
        "corr = df.corr(method='pearson', numeric_only=True)\n",
        "print (corr)\n",
        "\n",
        "corr = df.corr(method='spearman', numeric_only=True)\n",
        "print (\"\\n\",corr)"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "buBB1IzShADO"
      },
      "source": [
        "## Task 2.1 - ML Workflow to Critically Evaluate"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "E_dnWMOXhADO",
        "outputId": "6240c38d-cb26-4578-e21d-3ed5efd789a8"
      },
      "outputs": [
        {
          "name": "stderr",
          "output_type": "stream",
          "text": [
            "<ipython-input-4-d3c05b3d5a77>:6: SettingWithCopyWarning: \n",
            "A value is trying to be set on a copy of a slice from a DataFrame.\n",
            "Try using .loc[row_indexer,col_indexer] = value instead\n",
            "\n",
            "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
            "  df[cat_columns] = df[cat_columns].apply(lambda x: x.astype('category')) # converting 'object' columns to 'category' type\n",
            "<ipython-input-4-d3c05b3d5a77>:7: SettingWithCopyWarning: \n",
            "A value is trying to be set on a copy of a slice from a DataFrame.\n",
            "Try using .loc[row_indexer,col_indexer] = value instead\n",
            "\n",
            "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
            "  df[cat_columns] = df[cat_columns].apply(lambda x: x.cat.codes) # converting the 'category' columns to integer encoded values\n"
          ]
        }
      ],
      "source": [
        "# Dropping all rows with missing values\n",
        "df = df.dropna()\n",
        "\n",
        "# Converting all non-numeric (object) features to numeric\n",
        "cat_columns = df.select_dtypes(['object']).columns\n",
        "df[cat_columns] = df[cat_columns].apply(lambda x: x.astype('category')) # converting 'object' columns to 'category' type\n",
        "df[cat_columns] = df[cat_columns].apply(lambda x: x.cat.codes) # converting the 'category' columns to integer encoded values"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "1qAfgBfohADO",
        "outputId": "9ff60533-8fb1-43c7-c7ce-616882ff58ce"
      },
      "outputs": [
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "[[222  45  17  67]\n",
            " [ 26 315  13  13]\n",
            " [  8  14 317  10]\n",
            " [ 41  42  14 296]]\n",
            "\n",
            "Accuracy (Testing):  0.79 \n"
          ]
        },
        {
          "name": "stderr",
          "output_type": "stream",
          "text": [
            "/usr/local/lib/python3.10/dist-packages/sklearn/linear_model/_logistic.py:469: ConvergenceWarning: lbfgs failed to converge (status=1):\n",
            "STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.\n",
            "\n",
            "Increase the number of iterations (max_iter) or scale the data as shown in:\n",
            "    https://scikit-learn.org/stable/modules/preprocessing.html\n",
            "Please also refer to the documentation for alternative solver options:\n",
            "    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression\n",
            "  n_iter_i = _check_optimize_result(\n"
          ]
        }
      ],
      "source": [
        "# Splits the Pandas DataFrame into a feature matrix (X) and class/label vector (y)\n",
        "X = df.iloc[:,:len(df.columns)-1]\n",
        "y = df.iloc[:,len(df.columns)-1]\n",
        "\n",
        "# Splitting dataset for hold-out validation\n",
        "X_train, X_test, y_train, y_test = train_test_split(X, # feature matrix\n",
        "                                                    y, # label vector\n",
        "                                                    test_size=0.2,\n",
        "                                                    random_state=1,\n",
        "                                                    stratify=None\n",
        "                                                   )\n",
        "\n",
        "# Creating and testing a Logistic Regression Model\n",
        "model = LogisticRegression()\n",
        "\n",
        "# Training the model\n",
        "model.fit(X_train, y_train)\n",
        "\n",
        "# Testing the model\n",
        "y_pred = model.predict(X_test)\n",
        "\n",
        "# Printing out confusion matrix and accuracy\n",
        "print(metrics.confusion_matrix(y_test, y_pred))\n",
        "print(\"\\nAccuracy (Testing):  %0.2f \" % (metrics.accuracy_score(y_test, y_pred)))"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "Nh9TQqDThADO"
      },
      "source": [
        "## Task 2.3 - Evaluation of Improved ML Workflow\n",
        "\n",
        "Add code for running your **improved** machine learning experiments below.\n"
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# Loading the dataset again, for you to do your own pre-processing (instead of what was done above)\n",
        "df = pd.read_csv('/content/drive/MyDrive/Assignment 2 - Machine Learning/Data/weather_dataset.csv')"
      ],
      "metadata": {
        "id": "Zgz8D9rjP8Qv"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "#Handling Missing Values\n",
        "\n",
        "from sklearn.impute import SimpleImputer\n",
        "\n",
        "if df.empty:\n",
        "    raise ValueError(\"The dataframe 'df' is empty. Please check your data.\")\n",
        "\n",
        "#Select Numeric And Categorical Columns\n",
        "numeric_cols = df.select_dtypes(include=['float64', 'int64']).columns\n",
        "categorical_cols = df.select_dtypes(include=['object']).columns\n",
        "\n",
        "#Impute Missing Numeric Columns With The Mean\n",
        "if len(numeric_cols) > 0:\n",
        "    imputer = SimpleImputer(strategy='mean')\n",
        "    df[numeric_cols] = imputer.fit_transform(df[numeric_cols])\n",
        "\n",
        "#Impute Missing Categorical Columns With The Most Frequent Value\n",
        "if len(categorical_cols) > 0:\n",
        "    categorical_imputer = SimpleImputer(strategy='most_frequent')\n",
        "    df[categorical_cols] = categorical_imputer.fit_transform(df[categorical_cols])"
      ],
      "metadata": {
        "id": "FARmYKInJhAu"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "#Drop Duplicates\n",
        "\n",
        "dd = df.drop_duplicates()"
      ],
      "metadata": {
        "id": "ROLR4xyOJk0_"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "#Dataset Missing Values\n",
        "df.isnull().sum()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 398
        },
        "id": "pQMrNNMrJoJg",
        "outputId": "e2842a2b-e2e8-4e96-a4a5-741c8de8dd39"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "temperature             0\n",
              "humidity                0\n",
              "wind_speed              0\n",
              "precipitation           0\n",
              "cloud_cover             0\n",
              "atmospheric_pressure    0\n",
              "season                  0\n",
              "visibility              0\n",
              "location                0\n",
              "weather                 0\n",
              "dtype: int64"
            ],
            "text/html": [
              "<div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>0</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>temperature</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>humidity</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>wind_speed</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>precipitation</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>cloud_cover</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>atmospheric_pressure</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>season</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>visibility</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>location</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>weather</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div><br><label><b>dtype:</b> int64</label>"
            ]
          },
          "metadata": {},
          "execution_count": 8
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "#Dataset Attributes\n",
        "#(Brownlee, 2020)\n",
        "\n",
        "from collections import Counter\n",
        "from matplotlib import pyplot\n",
        "from numpy import where\n",
        "\n",
        "X = df.drop('weather', axis=1).values\n",
        "y = df['weather'].values\n",
        "\n",
        "counter = Counter(y)\n",
        "print(counter)\n",
        "\n",
        "for label, _ in counter.items():\n",
        "    row_ix = where(y == label)[0]\n",
        "    pyplot.scatter(X[row_ix, 0], X[row_ix, 1], label=str(label))\n",
        "pyplot.legend()\n",
        "pyplot.show()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 447
        },
        "id": "mT82ZihlZ1nO",
        "outputId": "16c908f8-d24d-40f6-ccdd-53ae86b95dca"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Counter({'Rainy': 3300, 'Cloudy': 3300, 'Sunny': 3300, 'Snowy': 3300})\n"
          ]
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 640x480 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "#Dataset Noise Points\n",
        "\n",
        "from sklearn.preprocessing import LabelEncoder, StandardScaler\n",
        "from imblearn.over_sampling import SMOTE\n",
        "from sklearn.cluster import DBSCAN\n",
        "\n",
        "print(df.columns)\n",
        "\n",
        "numeric_cols = df.select_dtypes(include=['float64', 'int64']).columns\n",
        "categorical_cols = df.select_dtypes(include=['object']).columns\n",
        "\n",
        "for col in categorical_cols:\n",
        "    le = LabelEncoder()\n",
        "    df[col] = le.fit_transform(df[col])\n",
        "\n",
        "X = df.drop('weather', axis=1)\n",
        "y = df['weather']\n",
        "\n",
        "smote = SMOTE(random_state=42)\n",
        "X_resampled, y_resampled = smote.fit_resample(X, y)\n",
        "\n",
        "scaler = StandardScaler()\n",
        "X_resampled_scaled = scaler.fit_transform(X_resampled)\n",
        "\n",
        "db = DBSCAN(eps=0.5, min_samples=5)\n",
        "y_dbscan = db.fit_predict(X_resampled_scaled)\n",
        "\n",
        "X_resampled['cluster'] = y_dbscan\n",
        "\n",
        "noise_count = (y_dbscan == -1).sum()\n",
        "print(f\"Number of noise points: {noise_count}\")\n",
        "print(f\"Original dataset shape: {X.shape}\")\n",
        "print(f\"Resampled dataset shape: {X_resampled.shape}\")"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "NjcYqbxn75NH",
        "outputId": "48b7e688-becd-4294-a27e-837388ac12a8"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Index(['temperature', 'humidity', 'wind_speed', 'precipitation', 'cloud_cover',\n",
            "       'atmospheric_pressure', 'season', 'visibility', 'location', 'weather'],\n",
            "      dtype='object')\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "/usr/local/lib/python3.10/dist-packages/sklearn/base.py:474: FutureWarning: `BaseEstimator._validate_data` is deprecated in 1.6 and will be removed in 1.7. Use `sklearn.utils.validation.validate_data` instead. This function becomes public and is part of the scikit-learn developer API.\n",
            "  warnings.warn(\n",
            "/usr/local/lib/python3.10/dist-packages/sklearn/utils/_tags.py:354: FutureWarning: The SMOTE or classes from which it inherits use `_get_tags` and `_more_tags`. Please define the `__sklearn_tags__` method, or inherit from `sklearn.base.BaseEstimator` and/or other appropriate mixins such as `sklearn.base.TransformerMixin`, `sklearn.base.ClassifierMixin`, `sklearn.base.RegressorMixin`, and `sklearn.base.OutlierMixin`. From scikit-learn 1.7, not defining `__sklearn_tags__` will raise an error.\n",
            "  warnings.warn(\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Number of noise points: 10581\n",
            "Original dataset shape: (13200, 9)\n",
            "Resampled dataset shape: (13200, 10)\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "#Handing Dataset Noise Points\n",
        "\n",
        "numeric_cols = df.select_dtypes(include=['float64', 'int64']).columns\n",
        "categorical_cols = df.select_dtypes(include=['object']).columns\n",
        "\n",
        "for col in categorical_cols:\n",
        "    le = LabelEncoder()\n",
        "    df[col] = le.fit_transform(df[col])\n",
        "\n",
        "X = df.drop('weather', axis=1)\n",
        "y = df['weather']\n",
        "\n",
        "scaler = StandardScaler()\n",
        "X_scaled = scaler.fit_transform(X)\n",
        "\n",
        "db = DBSCAN(eps=0.5, min_samples=5)\n",
        "y_dbscan = db.fit_predict(X_scaled)\n",
        "\n",
        "X_clean = X[y_dbscan != -1]\n",
        "y_clean = y[y_dbscan != -1]\n",
        "\n",
        "smote = SMOTE(random_state=42)\n",
        "X_resampled, y_resampled = smote.fit_resample(X_clean, y_clean)\n",
        "\n",
        "noise_count = len(X) - len(X_clean)\n",
        "print(f\"Number of noise points removed: {noise_count}\")\n",
        "print(f\"Original dataset shape: {X.shape}\")\n",
        "print(f\"Resampled dataset shape: {X_resampled.shape}\")"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "HpmbWAM37-1y",
        "outputId": "fb0612d9-5d4c-4677-b838-b6b0159a43d9"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Number of noise points removed: 10581\n",
            "Original dataset shape: (13200, 9)\n",
            "Resampled dataset shape: (7528, 9)\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "/usr/local/lib/python3.10/dist-packages/sklearn/base.py:474: FutureWarning: `BaseEstimator._validate_data` is deprecated in 1.6 and will be removed in 1.7. Use `sklearn.utils.validation.validate_data` instead. This function becomes public and is part of the scikit-learn developer API.\n",
            "  warnings.warn(\n",
            "/usr/local/lib/python3.10/dist-packages/sklearn/utils/_tags.py:354: FutureWarning: The SMOTE or classes from which it inherits use `_get_tags` and `_more_tags`. Please define the `__sklearn_tags__` method, or inherit from `sklearn.base.BaseEstimator` and/or other appropriate mixins such as `sklearn.base.TransformerMixin`, `sklearn.base.ClassifierMixin`, `sklearn.base.RegressorMixin`, and `sklearn.base.OutlierMixin`. From scikit-learn 1.7, not defining `__sklearn_tags__` will raise an error.\n",
            "  warnings.warn(\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "#Dataset Noise Points\n",
        "#(Scikit Learn, n.d.)\n",
        "\n",
        "features = df[['temperature', 'humidity', 'wind_speed', 'precipitation', 'visibility']].copy()\n",
        "\n",
        "features.fillna(features.mean(), inplace=True)\n",
        "\n",
        "scaler = StandardScaler()\n",
        "scaled_features = scaler.fit_transform(features)\n",
        "\n",
        "db = DBSCAN(eps=0.5, min_samples=5)\n",
        "df['cluster'] = db.fit_predict(scaled_features)\n",
        "\n",
        "df.loc[df['cluster'] == -1, ['temperature', 'humidity', 'wind_speed', 'precipitation', 'visibility']] = 0\n",
        "\n",
        "noise_count = len(df[df['cluster'] == -1])\n",
        "print(f'Number of noise points: {noise_count}')"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "3FFoZClO8Gd0",
        "outputId": "ad27516e-38ce-451a-a2ab-09645a623544"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Number of noise points: 0\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "#Dataset Noise Points\n",
        "noise_count = np.sum(df['cluster'] == -1)\n",
        "print(f'Number of noise points: {noise_count}')"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "ntEpa8xt8M6i",
        "outputId": "e276b31b-67ed-411f-9e1b-ea59373aa951"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Number of noise points: 0\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "#Handling Dataset Noise\n",
        "#Assissted By ChatGPT (OpenAI, 2022)\n",
        "\n",
        "features = df[['temperature', 'humidity', 'wind_speed', 'precipitation', 'visibility']].copy()\n",
        "\n",
        "features.fillna(features.mean(), inplace=True)\n",
        "\n",
        "scaler = StandardScaler()\n",
        "scaled_features = scaler.fit_transform(features)\n",
        "\n",
        "db = DBSCAN(eps=0.5, min_samples=5)\n",
        "df['cluster'] = db.fit_predict(scaled_features)\n",
        "\n",
        "noise_data = df[df['cluster'] == -1]\n",
        "\n",
        "noise_count = len(noise_data)\n",
        "print(f'Number of noise points: {noise_count}')\n",
        "\n",
        "plt.figure(figsize=(10, 6))\n",
        "\n",
        "plt.scatter(df['temperature'], df['humidity'], c=df['cluster'], cmap='viridis', label='Data Points')\n",
        "\n",
        "plt.scatter(noise_data['temperature'], noise_data['humidity'], color='red', label='Noise', alpha=0.5)\n",
        "\n",
        "plt.title('Scatter Plot of Data Points with Noise')\n",
        "plt.xlabel('Temperature')\n",
        "plt.ylabel('Humidity')\n",
        "plt.legend()\n",
        "\n",
        "plt.show()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 581
        },
        "id": "gRWqeQCxmnVL",
        "outputId": "9e17bb49-09db-41e4-92b8-4b5589961918"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Number of noise points: 0\n"
          ]
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 1000x600 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "#Scatterplot Showing Noise Points\n",
        "#(Scikit Learn, n.d.)\n",
        "\n",
        "data = pd.DataFrame({\n",
        "    'x': np.random.rand(1000)*100,\n",
        "    'y': np.random.rand(1000)*100,\n",
        "    'label': np.random.choice(['temperature', 'humidity', 'wind_speed', 'precipitation', 'visibility'], 1000)\n",
        "})\n",
        "\n",
        "scaler = StandardScaler()\n",
        "scaled_data = scaler.fit_transform(data[['x', 'y']])\n",
        "\n",
        "db = DBSCAN(eps=1, min_samples=10)\n",
        "data['cluster'] = db.fit_predict(scaled_data)\n",
        "\n",
        "noise_data = data[data['cluster'] == -1]\n",
        "\n",
        "plt.figure(figsize=(10,6))\n",
        "plt.scatter(noise_data['x'], noise_data['y'], color='gray', label='Noise', alpha=0.5)\n",
        "\n",
        "plt.title('Scatterplot Showing Only Noise Points')\n",
        "plt.xlabel('X Axis')\n",
        "plt.ylabel('Y Axis')\n",
        "plt.legend()\n",
        "\n",
        "plt.show()\n",
        "\n",
        "print(f'Number of noise points: {len(noise_data)}')"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 581
        },
        "id": "M1QLu4C07VBQ",
        "outputId": "9ebd8f91-536e-4a91-b91f-a5f4d0bb6577"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 1000x600 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Number of noise points: 0\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "gbYS3pPACNhu"
      },
      "outputs": [],
      "source": [
        "# Loading the dataset again, for you to do your own pre-processing (instead of what was done above)\n",
        "df = pd.read_csv('/content/drive/MyDrive/Assignment 2 - Machine Learning/Data/weather_dataset.csv')"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "TLXshx90hADO",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "4d98e983-4cc3-4c4b-dd77-d196aea5a973"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "   temperature  humidity  wind_speed  precipitation    cloud_cover  \\\n",
            "0         14.0      73.0         9.5           82.0  partly cloudy   \n",
            "1         39.0      96.0         8.5           71.0  partly cloudy   \n",
            "2          NaN       0.0         7.0            NaN          clear   \n",
            "3         38.0      83.0         1.5           82.0          clear   \n",
            "4          NaN      74.0        17.0            NaN       overcast   \n",
            "\n",
            "   atmospheric_pressure  season  visibility  location weather  \n",
            "0               1010.82  Winter         3.5    inland   Rainy  \n",
            "1               1011.43  Spring        10.0    inland  Cloudy  \n",
            "2               1018.72  Spring         5.5  mountain   Sunny  \n",
            "3               1026.25  Spring         1.0   coastal   Sunny  \n",
            "4                990.67  Winter         2.5  mountain   Rainy  \n"
          ]
        }
      ],
      "source": [
        "print(df.head())"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "5RPyP5yA2qIm"
      },
      "outputs": [],
      "source": [
        "#Random Forest Model\n",
        "\n",
        "from sklearn.metrics import accuracy_score, confusion_matrix, recall_score\n",
        "from sklearn.model_selection import StratifiedKFold, cross_val_score\n",
        "\n",
        "X = df.drop('weather', axis=1)\n",
        "y = df['weather']\n",
        "\n",
        "cv = StratifiedKFold(n_splits=5, random_state=42, shuffle=True)\n",
        "\n",
        "numeric_cols = X.select_dtypes(include=['float64', 'int64']).columns\n",
        "scaler = StandardScaler()\n",
        "X_scaled = scaler.fit_transform(X[numeric_cols])\n",
        "\n",
        "param_distributions = {\n",
        "    'n_estimators': [100, 200],\n",
        "    'max_depth': [None, 10, 20],\n",
        "    'min_samples_split': [2, 10],\n",
        "    'min_samples_leaf': [1, 2, 4],\n",
        "    'bootstrap': [True, False]\n",
        "}"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "peLuOFML3Vxl"
      },
      "outputs": [],
      "source": [
        "#(Scikit-Learn, 2024)\n",
        "\n",
        "rf_model = RandomForestClassifier(random_state=42)\n",
        "\n",
        "random_search = RandomizedSearchCV(\n",
        "    rf_model,\n",
        "    param_distributions,\n",
        "    n_iter=10,\n",
        "    cv=3,\n",
        "    verbose=2,\n",
        "    n_jobs=-1,\n",
        "    random_state=42\n",
        ")"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "Rm2yata43dmu",
        "outputId": "04ddf2ac-8160-485d-99aa-68b6c33416fc"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Fitting 3 folds for each of 10 candidates, totalling 30 fits\n"
          ]
        }
      ],
      "source": [
        "random_search.fit(X_scaled, y)\n",
        "best_model = random_search.best_estimator_"
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "cv_scores = cross_val_score(best_model, X_scaled, y, cv=cv, scoring='accuracy')"
      ],
      "metadata": {
        "id": "mFtZa1fONHD6"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "accuracy = np.mean(cv_scores)\n",
        "conf_matrix = confusion_matrix(y, best_model.predict(X_scaled))\n",
        "recall = recall_score(y, best_model.predict(X_scaled), average='macro')\n",
        "\n",
        "print(f\"Accuracy: {accuracy * 100:.2f}%\")\n",
        "print(\"Confusion Matrix:\")\n",
        "print(conf_matrix)\n",
        "print(f\"Recall: {recall * 100:.2f}%\")\n",
        "print(f\"Best hyperparameters: {random_search.best_params_}\")"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "Z_vl-_e3NIma",
        "outputId": "58d6bf62-ccda-4aba-cbbd-b81db2c3aa2d"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Accuracy: 86.14%\n",
            "Confusion Matrix:\n",
            "[[3049  191    7   53]\n",
            " [  28 3095  167   10]\n",
            " [   9   54 3225   12]\n",
            " [ 191   74    4 3031]]\n",
            "Recall: 93.94%\n",
            "Best hyperparameters: {'n_estimators': 100, 'min_samples_split': 10, 'min_samples_leaf': 2, 'max_depth': 10, 'bootstrap': False}\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "gYBwMLbe4sLp"
      },
      "outputs": [],
      "source": [
        "# Loading the dataset again, for you to do your own pre-processing (instead of what was done above)\n",
        "df = pd.read_csv('/content/drive/MyDrive/Assignment 2 - Machine Learning/Data/weather_dataset.csv')"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "5C82h1Wj4vGV",
        "outputId": "e5c999aa-f094-4de2-a674-eef2e43d1710"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "   temperature  humidity  wind_speed  precipitation    cloud_cover  \\\n",
            "0         14.0      73.0         9.5           82.0  partly cloudy   \n",
            "1         39.0      96.0         8.5           71.0  partly cloudy   \n",
            "2          NaN       0.0         7.0            NaN          clear   \n",
            "3         38.0      83.0         1.5           82.0          clear   \n",
            "4          NaN      74.0        17.0            NaN       overcast   \n",
            "\n",
            "   atmospheric_pressure  season  visibility  location weather  \n",
            "0               1010.82  Winter         3.5    inland   Rainy  \n",
            "1               1011.43  Spring        10.0    inland  Cloudy  \n",
            "2               1018.72  Spring         5.5  mountain   Sunny  \n",
            "3               1026.25  Spring         1.0   coastal   Sunny  \n",
            "4                990.67  Winter         2.5  mountain   Rainy  \n"
          ]
        }
      ],
      "source": [
        "print(df.head())"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "e0EMhb_f48LD"
      },
      "outputs": [],
      "source": [
        "#Decision Tree Model\n",
        "\n",
        "X = df.drop('weather', axis=1)\n",
        "y = df['weather']\n",
        "\n",
        "cv = StratifiedKFold(n_splits=5, random_state=42, shuffle=True)\n",
        "\n",
        "categorical_cols = X.select_dtypes(include=['object']).columns\n",
        "label_encoders = {}"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "rsIeufgj49w3"
      },
      "outputs": [],
      "source": [
        "for col in categorical_cols:\n",
        "    le = LabelEncoder()\n",
        "    X[col] = le.fit_transform(X[col])\n",
        "    label_encoders[col] = le\n",
        "\n",
        "numeric_cols = X.select_dtypes(include=['float64', 'int64']).columns\n",
        "scaler = StandardScaler()\n",
        "X_scaled = scaler.fit_transform(X[numeric_cols])\n",
        "\n",
        "dt_model = DecisionTreeClassifier(random_state=42, max_depth=5)\n",
        "\n",
        "accuracies = []\n",
        "recalls = []\n",
        "conf_matrices = []"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "6onkrNEy5Cvz"
      },
      "outputs": [],
      "source": [
        "for train_index, test_index in cv.split(X_scaled, y):\n",
        "\n",
        "    X_train, X_test = X_scaled[train_index], X_scaled[test_index]\n",
        "    y_train, y_test = y.iloc[train_index], y.iloc[test_index]\n",
        "\n",
        "    dt_model.fit(X_train, y_train)\n",
        "\n",
        "    y_pred = dt_model.predict(X_test)\n",
        "\n",
        "    accuracy = accuracy_score(y_test, y_pred)\n",
        "    recall = recall_score(y_test, y_pred, average='macro')\n",
        "    conf_matrix = confusion_matrix(y_test, y_pred)\n",
        "\n",
        "    accuracies.append(accuracy)\n",
        "    recalls.append(recall)\n",
        "    conf_matrices.append(conf_matrix)"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "Z1OVYMfW5IDA",
        "outputId": "be11a47e-09f4-4d32-9d89-c8462259c4cf"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Test Accuracy: 85.71%\n",
            "Confusion Matrix:\n",
            "[[559.   78.2  10.   12.8]\n",
            " [ 28.4 599.2  18.6  13.8]\n",
            " [ 33.   53.8 561.8  11.4]\n",
            " [ 65.2  41.6  10.4 542.8]]\n",
            "Recall: 85.71%\n",
            "\n",
            "Decision Tree Rules:\n",
            "|--- visibility <= -0.06\n",
            "|   |--- temperature <= -0.73\n",
            "|   |   |--- season <= 0.51\n",
            "|   |   |   |--- cloud_cover <= 0.46\n",
            "|   |   |   |   |--- precipitation <= 0.56\n",
            "|   |   |   |   |   |--- class: Rainy\n",
            "|   |   |   |   |--- precipitation >  0.56\n",
            "|   |   |   |   |   |--- class: Sunny\n",
            "|   |   |   |--- cloud_cover >  0.46\n",
            "|   |   |   |   |--- wind_speed <= 1.91\n",
            "|   |   |   |   |   |--- class: Cloudy\n",
            "|   |   |   |   |--- wind_speed >  1.91\n",
            "|   |   |   |   |   |--- class: Rainy\n",
            "|   |   |--- season >  0.51\n",
            "|   |   |   |--- location <= -0.76\n",
            "|   |   |   |   |--- wind_speed <= -0.37\n",
            "|   |   |   |   |   |--- class: Cloudy\n",
            "|   |   |   |   |--- wind_speed >  -0.37\n",
            "|   |   |   |   |   |--- class: Rainy\n",
            "|   |   |   |--- location >  -0.76\n",
            "|   |   |   |   |--- atmospheric_pressure <= 2.43\n",
            "|   |   |   |   |   |--- class: Snowy\n",
            "|   |   |   |   |--- atmospheric_pressure >  2.43\n",
            "|   |   |   |   |   |--- class: Sunny\n",
            "|   |--- temperature >  -0.73\n",
            "|   |   |--- atmospheric_pressure <= -0.43\n",
            "|   |   |   |--- atmospheric_pressure <= -0.81\n",
            "|   |   |   |   |--- humidity <= -0.11\n",
            "|   |   |   |   |   |--- class: Sunny\n",
            "|   |   |   |   |--- humidity >  -0.11\n",
            "|   |   |   |   |   |--- class: Rainy\n",
            "|   |   |   |--- atmospheric_pressure >  -0.81\n",
            "|   |   |   |   |--- temperature <= 0.57\n",
            "|   |   |   |   |   |--- class: Snowy\n",
            "|   |   |   |   |--- temperature >  0.57\n",
            "|   |   |   |   |   |--- class: Rainy\n",
            "|   |   |--- atmospheric_pressure >  -0.43\n",
            "|   |   |   |--- cloud_cover <= -1.47\n",
            "|   |   |   |   |--- class: Sunny\n",
            "|   |   |   |--- cloud_cover >  -1.47\n",
            "|   |   |   |   |--- wind_speed <= -0.74\n",
            "|   |   |   |   |   |--- class: Cloudy\n",
            "|   |   |   |   |--- wind_speed >  -0.74\n",
            "|   |   |   |   |   |--- class: Rainy\n",
            "|--- visibility >  -0.06\n",
            "|   |--- cloud_cover <= -1.47\n",
            "|   |   |--- class: Sunny\n",
            "|   |--- cloud_cover >  -1.47\n",
            "|   |   |--- humidity <= -0.64\n",
            "|   |   |   |--- precipitation <= -1.07\n",
            "|   |   |   |   |--- cloud_cover <= 0.46\n",
            "|   |   |   |   |   |--- class: Cloudy\n",
            "|   |   |   |   |--- cloud_cover >  0.46\n",
            "|   |   |   |   |   |--- class: Sunny\n",
            "|   |   |   |--- precipitation >  -1.07\n",
            "|   |   |   |   |--- humidity <= -2.23\n",
            "|   |   |   |   |   |--- class: Cloudy\n",
            "|   |   |   |   |--- humidity >  -2.23\n",
            "|   |   |   |   |   |--- class: Rainy\n",
            "|   |   |--- humidity >  -0.64\n",
            "|   |   |   |--- atmospheric_pressure <= 0.38\n",
            "|   |   |   |   |--- atmospheric_pressure <= -0.16\n",
            "|   |   |   |   |   |--- class: Snowy\n",
            "|   |   |   |   |--- atmospheric_pressure >  -0.16\n",
            "|   |   |   |   |   |--- class: Cloudy\n",
            "|   |   |   |--- atmospheric_pressure >  0.38\n",
            "|   |   |   |   |--- atmospheric_pressure <= 0.72\n",
            "|   |   |   |   |   |--- class: Sunny\n",
            "|   |   |   |   |--- atmospheric_pressure >  0.72\n",
            "|   |   |   |   |   |--- class: Cloudy\n",
            "\n"
          ]
        }
      ],
      "source": [
        "from sklearn.tree import export_text\n",
        "\n",
        "mean_accuracy = np.mean(accuracies)\n",
        "mean_recall = np.mean(recalls)\n",
        "mean_conf_matrix = np.mean(conf_matrices, axis=0)\n",
        "\n",
        "print(f\"Test Accuracy: {mean_accuracy * 100:.2f}%\")\n",
        "print(\"Confusion Matrix:\")\n",
        "print(mean_conf_matrix)\n",
        "print(f\"Recall: {mean_recall * 100:.2f}%\")\n",
        "\n",
        "numeric_cols = X.select_dtypes(include=['float64', 'int64']).columns\n",
        "print(\"\\nDecision Tree Rules:\")\n",
        "print(export_text(dt_model, feature_names=list(numeric_cols)))"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "Jn0I4G2y5_li"
      },
      "outputs": [],
      "source": [
        "# Loading the dataset again, for you to do your own pre-processing (instead of what was done above)\n",
        "df = pd.read_csv('/content/drive/MyDrive/Assignment 2 - Machine Learning/Data/weather_dataset.csv')"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "xnMoWJwW6CXI",
        "outputId": "3dc916b9-1f33-46d9-8884-698d9899f962"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "   temperature  humidity  wind_speed  precipitation    cloud_cover  \\\n",
            "0         14.0      73.0         9.5           82.0  partly cloudy   \n",
            "1         39.0      96.0         8.5           71.0  partly cloudy   \n",
            "2          NaN       0.0         7.0            NaN          clear   \n",
            "3         38.0      83.0         1.5           82.0          clear   \n",
            "4          NaN      74.0        17.0            NaN       overcast   \n",
            "\n",
            "   atmospheric_pressure  season  visibility  location weather  \n",
            "0               1010.82  Winter         3.5    inland   Rainy  \n",
            "1               1011.43  Spring        10.0    inland  Cloudy  \n",
            "2               1018.72  Spring         5.5  mountain   Sunny  \n",
            "3               1026.25  Spring         1.0   coastal   Sunny  \n",
            "4                990.67  Winter         2.5  mountain   Rainy  \n"
          ]
        }
      ],
      "source": [
        "print(df.head())"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "ktZ6vjcs6HXu",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "2d8ba9b2-4225-416f-8553-8eee6f68b9b3"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "NaN values detected. Dropping rows with NaN values.\n"
          ]
        }
      ],
      "source": [
        "#KNN Model\n",
        "\n",
        "from sklearn.impute import SimpleImputer\n",
        "\n",
        "X = df.drop('weather', axis=1)\n",
        "y = df['weather']\n",
        "\n",
        "if X.isnull().any().any():\n",
        "    print(\"NaN values detected. Dropping rows with NaN values.\")\n",
        "    df = df.dropna()\n",
        "    X = df.drop('weather', axis=1)\n",
        "    y = df['weather']\n",
        "else:\n",
        "    print(\"No NaN values detected in the features.\")\n",
        "\n",
        "categorical_cols = X.select_dtypes(include=['object']).columns\n",
        "for col in categorical_cols:\n",
        "    le = LabelEncoder()\n",
        "    X[col] = le.fit_transform(X[col])\n",
        "\n",
        "scaler = StandardScaler()\n",
        "X_scaled = scaler.fit_transform(X)"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "MQvIXyMZ6Vg-"
      },
      "outputs": [],
      "source": [
        "categorical_cols = X.select_dtypes(include=['object']).columns\n",
        "for col in categorical_cols:\n",
        "    le = LabelEncoder()\n",
        "    X[col] = le.fit_transform(X[col])"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "x-q78fY66Xi1"
      },
      "outputs": [],
      "source": [
        "scaler = StandardScaler()\n",
        "X_scaled = scaler.fit_transform(X)"
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "if np.any(np.isnan(X_scaled)):\n",
        "    print(\"There are NaN values after scaling. Check scaling process.\")\n",
        "else:\n",
        "    print(\"No NaN values after scaling.\")"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "URvbOkuiymcy",
        "outputId": "761b87f4-8bc0-455b-f3af-96d1f7b7d9b0"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "No NaN values after scaling.\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "knn_model = KNeighborsClassifier(n_neighbors=5)\n",
        "\n",
        "cv = StratifiedKFold(n_splits=5, random_state=42, shuffle=True)"
      ],
      "metadata": {
        "id": "xqCzeynIyo7p"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "accuracies = []\n",
        "recalls = []\n",
        "conf_matrices = []\n",
        "\n",
        "for train_index, test_index in cv.split(X_scaled, y):\n",
        "    X_train, X_test = X_scaled[train_index], X_scaled[test_index]\n",
        "    y_train, y_test = y.iloc[train_index], y.iloc[test_index]\n",
        "\n",
        "    knn_model.fit(X_train, y_train)\n",
        "\n",
        "    y_pred = knn_model.predict(X_test)\n",
        "\n",
        "    accuracy = accuracy_score(y_test, y_pred)\n",
        "    recall = recall_score(y_test, y_pred, average='macro')\n",
        "    conf_matrix = confusion_matrix(y_test, y_pred)\n",
        "\n",
        "    accuracies.append(accuracy)\n",
        "    recalls.append(recall)\n",
        "    conf_matrices.append(conf_matrix)"
      ],
      "metadata": {
        "id": "nE1vgYKmyuZq"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "-h4SNRbE6gJ2",
        "outputId": "cb42e096-92db-411b-b24e-4e862f623200"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Test Accuracy: 88.53%\n",
            "Confusion Matrix:\n",
            "[[308.   34.2   6.4  12.4]\n",
            " [ 17.8 332.2  15.2   5.2]\n",
            " [ 10.6  10.2 337.8   6.8]\n",
            " [ 28.4  14.    6.2 313.8]]\n",
            "Recall: 88.51%\n"
          ]
        }
      ],
      "source": [
        "mean_accuracy = np.mean(accuracies)\n",
        "mean_recall = np.mean(recalls)\n",
        "mean_conf_matrix = np.mean(conf_matrices, axis=0)\n",
        "\n",
        "print(f\"Test Accuracy: {mean_accuracy * 100:.2f}%\")\n",
        "print(\"Confusion Matrix:\")\n",
        "print(mean_conf_matrix)\n",
        "print(f\"Recall: {mean_recall * 100:.2f}%\")"
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "#Results Table\n",
        "\n",
        "model_names = ['Logistic Regression', 'Random Forest', 'Decision Tree', 'KNN']\n",
        "accuracy = [0.79, 0.89, 0.86, 0.89]\n",
        "recall = [0.80, 0.99, 0.86, 0.89]\n",
        "precision = [0.75, 0.89, 0.83, 0.81]\n",
        "\n",
        "results_df = pd.DataFrame({\n",
        "    'Model': model_names,\n",
        "    'Accuracy': accuracy,\n",
        "    'Recall': recall,\n",
        "    'Precision': precision\n",
        "})\n",
        "\n",
        "print(results_df)"
      ],
      "metadata": {
        "id": "zdzP2HuOx--o"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "model_names = ['Logistic Regression', 'Random Forest', 'Decision Tree', 'KNN']\n",
        "accuracy = [0.79, 0.89, 0.86, 0.86]\n",
        "recall = [0.80, 0.99, 0.86, 0.86]\n",
        "precision = [0.75, 0.89, 0.83, 0.81]\n",
        "\n",
        "x = np.arange(len(model_names))\n",
        "\n",
        "width = 0.2\n",
        "\n",
        "fig, ax = plt.subplots(figsize=(10, 6))\n",
        "\n",
        "ax.bar(x - width, accuracy, width, label='Accuracy')\n",
        "ax.bar(x, recall, width, label='Recall')\n",
        "ax.bar(x + width, precision, width, label='Precision')\n",
        "\n",
        "ax.set_xlabel('Models')\n",
        "ax.set_ylabel('Scores')\n",
        "ax.set_title('Comparison of Model Performance')\n",
        "ax.set_xticks(x)\n",
        "ax.set_xticklabels(model_names)\n",
        "ax.legend()\n",
        "\n",
        "plt.show()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 564
        },
        "id": "6JgH-7dIcm93",
        "outputId": "74799bde-4171-4f26-9ec4-366f827523e5"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 1000x600 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    }
  ],
  "metadata": {
    "colab": {
      "provenance": []
    },
    "kernelspec": {
      "display_name": "Python 3 (ipykernel)",
      "language": "python",
      "name": "python3"
    },
    "language_info": {
      "codemirror_mode": {
        "name": "ipython",
        "version": 3
      },
      "file_extension": ".py",
      "mimetype": "text/x-python",
      "name": "python",
      "nbconvert_exporter": "python",
      "pygments_lexer": "ipython3",
      "version": "3.11.1"
    },
    "toc": {
      "base_numbering": 1,
      "nav_menu": {},
      "number_sections": true,
      "sideBar": true,
      "skip_h1_title": false,
      "title_cell": "Table of Contents",
      "title_sidebar": "Contents",
      "toc_cell": false,
      "toc_position": {},
      "toc_section_display": true,
      "toc_window_display": true
    },
    "varInspector": {
      "cols": {
        "lenName": 16,
        "lenType": 16,
        "lenVar": 40
      },
      "kernels_config": {
        "python": {
          "delete_cmd_postfix": "",
          "delete_cmd_prefix": "del ",
          "library": "var_list.py",
          "varRefreshCmd": "print(var_dic_list())"
        },
        "r": {
          "delete_cmd_postfix": ") ",
          "delete_cmd_prefix": "rm(",
          "library": "var_list.r",
          "varRefreshCmd": "cat(var_dic_list()) "
        }
      },
      "types_to_exclude": [
        "module",
        "function",
        "builtin_function_or_method",
        "instance",
        "_Feature"
      ],
      "window_display": false
    }
  },
  "nbformat": 4,
  "nbformat_minor": 0
}