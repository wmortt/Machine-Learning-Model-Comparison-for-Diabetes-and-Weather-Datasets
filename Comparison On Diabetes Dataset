{
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "HLQCxocSDwmF"
      },
      "source": [
        "# Machine Learning Assignment\n",
        "\n",
        "**Dataset**:       DIABETES\n"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "XtVJHRaYDwmG"
      },
      "source": [
        "## Imports\n",
        "\n",
        "Add imports here as needed.\n",
        "\n",
        "Remember to **re-run the cell when you add imports**, so it gets loaded into the virtual notebook environment!"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "ExecuteTime": {
          "end_time": "2023-10-06T12:15:57.379422Z",
          "start_time": "2023-10-06T12:15:44.665480Z"
        },
        "id": "K0DXsou2DwmH"
      },
      "outputs": [],
      "source": [
        "# Data and Datasets\n",
        "import pandas as pd\n",
        "from sklearn.datasets import load_iris\n",
        "from sklearn.datasets import load_wine\n",
        "from sklearn.preprocessing import StandardScaler\n",
        "\n",
        "# Clustering\n",
        "from sklearn.cluster import DBSCAN\n",
        "\n",
        "# Validation methods\n",
        "from sklearn.model_selection import train_test_split\n",
        "from sklearn.model_selection import cross_val_score\n",
        "from sklearn.model_selection import cross_validate\n",
        "from sklearn.model_selection import StratifiedKFold\n",
        "\n",
        "# Metrics\n",
        "from sklearn import metrics\n",
        "from sklearn.metrics import make_scorer\n",
        "from sklearn.metrics import accuracy_score\n",
        "from sklearn.metrics import precision_score\n",
        "from sklearn.metrics import recall_score\n",
        "\n",
        "# Classifiers\n",
        "from sklearn.linear_model import LogisticRegression\n",
        "from sklearn import tree\n",
        "from sklearn.tree import DecisionTreeClassifier\n",
        "from sklearn.ensemble import RandomForestClassifier\n",
        "from sklearn.naive_bayes import GaussianNB\n",
        "from sklearn.naive_bayes import MultinomialNB\n",
        "from sklearn.naive_bayes import BernoulliNB\n",
        "from sklearn.neighbors import KNeighborsClassifier\n",
        "\n",
        "# Hyper-parameter optimisation\n",
        "from sklearn.model_selection import GridSearchCV\n",
        "from sklearn.model_selection import RandomizedSearchCV\n",
        "\n",
        "# Feature selection & feature engineering\n",
        "from sklearn.feature_selection import RFE\n",
        "from sklearn.feature_selection import RFECV\n",
        "from sklearn.decomposition import PCA\n",
        "\n",
        "# Stats\n",
        "from scipy.stats import randint as sp_randint\n",
        "from scipy.stats import pearsonr\n",
        "from scipy.stats import spearmanr\n",
        "from scipy.stats import shapiro     # Shapiro Wilk\n",
        "from scipy.stats import normaltest  # D’Agostino’s K^2\n",
        "from scipy.stats import anderson    # Anderson-Darling\n",
        "from scipy.stats import ttest_ind    # independent student t-test; assumes normality\n",
        "from scipy.stats import mannwhitneyu # non-parametric; doesn't assume normality\n",
        "\n",
        "# Visualisation\n",
        "import matplotlib.pyplot as plt\n",
        "import seaborn as sns\n",
        "from IPython.display import SVG\n",
        "from graphviz import Source\n",
        "from IPython.display import display\n",
        "from sklearn.tree import export_graphviz\n",
        "\n",
        "# Utils\n",
        "import pprint\n",
        "import numpy as np\n",
        "from time import time\n",
        "import openpyxl"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "c3stDhgPDwmJ"
      },
      "source": [
        "## Loading the dataset"
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "from google.colab import drive\n",
        "drive.mount('/content/drive/')"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "6MMAsreQD2vX",
        "outputId": "9018d40a-419e-4a2e-bbaa-cf014e16ee0b"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Mounted at /content/drive/\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "ExecuteTime": {
          "end_time": "2023-10-06T12:15:57.505617Z",
          "start_time": "2023-10-06T12:15:57.390792Z"
        },
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 554
        },
        "id": "NzEqeFkdDwmJ",
        "outputId": "4adc08f6-b3b2-4dd6-cb85-90f47011695f"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "<class 'pandas.core.frame.DataFrame'>\n",
            "RangeIndex: 100000 entries, 0 to 99999\n",
            "Data columns (total 12 columns):\n",
            " #   Column               Non-Null Count   Dtype  \n",
            "---  ------               --------------   -----  \n",
            " 0   year                 99090 non-null   float64\n",
            " 1   gender               99097 non-null   object \n",
            " 2   age                  99095 non-null   float64\n",
            " 3   location             99096 non-null   object \n",
            " 4   race                 99099 non-null   float64\n",
            " 5   hypertension         99085 non-null   float64\n",
            " 6   heart_disease        99102 non-null   float64\n",
            " 7   smoking_history      99096 non-null   object \n",
            " 8   bmi                  99159 non-null   float64\n",
            " 9   hbA1c_level          79027 non-null   float64\n",
            " 10  blood_glucose_level  69458 non-null   float64\n",
            " 11  diabetes             100000 non-null  int64  \n",
            "dtypes: float64(8), int64(1), object(3)\n",
            "memory usage: 9.2+ MB\n",
            "None\n"
          ]
        },
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "     year  gender   age location  race  hypertension  heart_disease  \\\n",
              "0  2020.0  Female  32.0  Alabama   5.0           0.0            0.0   \n",
              "1  2015.0  Female  29.0  Alabama   2.0           0.0            0.0   \n",
              "2  2015.0    Male  18.0  Alabama   5.0           0.0            0.0   \n",
              "3  2015.0    Male  41.0  Alabama   3.0           0.0            0.0   \n",
              "4  2016.0  Female  52.0  Alabama   1.0           0.0            0.0   \n",
              "\n",
              "  smoking_history    bmi  hbA1c_level  blood_glucose_level  diabetes  \n",
              "0           never  27.32          NaN                100.0         0  \n",
              "1           never  19.95          NaN                 90.0         0  \n",
              "2           never  23.76          4.8                160.0         0  \n",
              "3           never  27.32          4.0                  NaN         0  \n",
              "4           never  23.75          6.5                  NaN         0  "
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-b798e3c7-1755-4a59-84d6-0f13e31e599b\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>year</th>\n",
              "      <th>gender</th>\n",
              "      <th>age</th>\n",
              "      <th>location</th>\n",
              "      <th>race</th>\n",
              "      <th>hypertension</th>\n",
              "      <th>heart_disease</th>\n",
              "      <th>smoking_history</th>\n",
              "      <th>bmi</th>\n",
              "      <th>hbA1c_level</th>\n",
              "      <th>blood_glucose_level</th>\n",
              "      <th>diabetes</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>2020.0</td>\n",
              "      <td>Female</td>\n",
              "      <td>32.0</td>\n",
              "      <td>Alabama</td>\n",
              "      <td>5.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>never</td>\n",
              "      <td>27.32</td>\n",
              "      <td>NaN</td>\n",
              "      <td>100.0</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>2015.0</td>\n",
              "      <td>Female</td>\n",
              "      <td>29.0</td>\n",
              "      <td>Alabama</td>\n",
              "      <td>2.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>never</td>\n",
              "      <td>19.95</td>\n",
              "      <td>NaN</td>\n",
              "      <td>90.0</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>2015.0</td>\n",
              "      <td>Male</td>\n",
              "      <td>18.0</td>\n",
              "      <td>Alabama</td>\n",
              "      <td>5.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>never</td>\n",
              "      <td>23.76</td>\n",
              "      <td>4.8</td>\n",
              "      <td>160.0</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>2015.0</td>\n",
              "      <td>Male</td>\n",
              "      <td>41.0</td>\n",
              "      <td>Alabama</td>\n",
              "      <td>3.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>never</td>\n",
              "      <td>27.32</td>\n",
              "      <td>4.0</td>\n",
              "      <td>NaN</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>2016.0</td>\n",
              "      <td>Female</td>\n",
              "      <td>52.0</td>\n",
              "      <td>Alabama</td>\n",
              "      <td>1.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>never</td>\n",
              "      <td>23.75</td>\n",
              "      <td>6.5</td>\n",
              "      <td>NaN</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-b798e3c7-1755-4a59-84d6-0f13e31e599b')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-b798e3c7-1755-4a59-84d6-0f13e31e599b button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-b798e3c7-1755-4a59-84d6-0f13e31e599b');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "<div id=\"df-ad5e0f5c-b1cf-40fb-aff5-4923721eaedf\">\n",
              "  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-ad5e0f5c-b1cf-40fb-aff5-4923721eaedf')\"\n",
              "            title=\"Suggest charts\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "  </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "  <script>\n",
              "    async function quickchart(key) {\n",
              "      const quickchartButtonEl =\n",
              "        document.querySelector('#' + key + ' button');\n",
              "      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "      quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "      try {\n",
              "        const charts = await google.colab.kernel.invokeFunction(\n",
              "            'suggestCharts', [key], {});\n",
              "      } catch (error) {\n",
              "        console.error('Error during call to suggestCharts:', error);\n",
              "      }\n",
              "      quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "    }\n",
              "    (() => {\n",
              "      let quickchartButtonEl =\n",
              "        document.querySelector('#df-ad5e0f5c-b1cf-40fb-aff5-4923721eaedf button');\n",
              "      quickchartButtonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "    })();\n",
              "  </script>\n",
              "</div>\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe",
              "variable_name": "df",
              "summary": "{\n  \"name\": \"df\",\n  \"rows\": 100000,\n  \"fields\": [\n    {\n      \"column\": \"year\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 1.3458015087295776,\n        \"min\": 2015.0,\n        \"max\": 2022.0,\n        \"num_unique_values\": 7,\n        \"samples\": [\n          2020.0,\n          2015.0,\n          2021.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"gender\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 3,\n        \"samples\": [\n          \"Female\",\n          \"Male\",\n          \"Other\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"age\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 22.518100529662295,\n        \"min\": 0.08,\n        \"max\": 80.0,\n        \"num_unique_values\": 102,\n        \"samples\": [\n          67.0,\n          20.0,\n          30.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"location\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 55,\n        \"samples\": [\n          \"New Jersey\",\n          \"Colorado\",\n          \"New Mexico\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"race\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 1.4169105568065614,\n        \"min\": 1.0,\n        \"max\": 5.0,\n        \"num_unique_values\": 5,\n        \"samples\": [\n          2.0,\n          4.0,\n          3.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"hypertension\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.26296267656477273,\n        \"min\": 0.0,\n        \"max\": 1.0,\n        \"num_unique_values\": 2,\n        \"samples\": [\n          1.0,\n          0.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"heart_disease\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.1946980601771783,\n        \"min\": 0.0,\n        \"max\": 1.0,\n        \"num_unique_values\": 2,\n        \"samples\": [\n          1.0,\n          0.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"smoking_history\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 6,\n        \"samples\": [\n          \"never\",\n          \"not current\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"bmi\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 8.81196342496962,\n        \"min\": 0.0,\n        \"max\": 95.69,\n        \"num_unique_values\": 4200,\n        \"samples\": [\n          16.7,\n          39.64\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"hbA1c_level\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 1.0697022609047389,\n        \"min\": 3.5,\n        \"max\": 9.0,\n        \"num_unique_values\": 18,\n        \"samples\": [\n          4.8,\n          4.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"blood_glucose_level\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 40.60843969641259,\n        \"min\": 80.0,\n        \"max\": 300.0,\n        \"num_unique_values\": 18,\n        \"samples\": [\n          100.0,\n          90.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"diabetes\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0,\n        \"min\": 0,\n        \"max\": 1,\n        \"num_unique_values\": 2,\n        \"samples\": [\n          1,\n          0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"
            }
          },
          "metadata": {},
          "execution_count": 3
        }
      ],
      "source": [
        "import pandas as pd\n",
        "\n",
        "df = pd.read_csv('/content/drive/MyDrive/Assignment 2 - Machine Learning/Data/diabetes_dataset_100k.csv')\n",
        "\n",
        "print(df.info())\n",
        "df.head()"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "ExecuteTime": {
          "end_time": "2023-10-06T12:15:57.538323Z",
          "start_time": "2023-10-06T12:15:57.507326Z"
        },
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 301
        },
        "id": "j2NGI2yeDwmK",
        "outputId": "ea09b258-3063-4276-d3bd-d52dcc663154"
      },
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "               year           age          race  hypertension  heart_disease  \\\n",
              "count  99090.000000  99095.000000  99099.000000  99085.000000   99102.000000   \n",
              "mean    2018.360067     41.885719      2.995146      0.074734       0.039464   \n",
              "std        1.345802     22.518101      1.416911      0.262963       0.194698   \n",
              "min     2015.000000      0.080000      1.000000      0.000000       0.000000   \n",
              "25%     2019.000000     24.000000      2.000000      0.000000       0.000000   \n",
              "50%     2019.000000     43.000000      3.000000      0.000000       0.000000   \n",
              "75%     2019.000000     60.000000      4.000000      0.000000       0.000000   \n",
              "max     2022.000000     80.000000      5.000000      1.000000       1.000000   \n",
              "\n",
              "                bmi   hbA1c_level  blood_glucose_level       diabetes  \n",
              "count  99159.000000  79027.000000         69458.000000  100000.000000  \n",
              "mean      25.936491      5.527778           138.019868       0.085000  \n",
              "std        8.811963      1.069702            40.608440       0.278883  \n",
              "min        0.000000      3.500000            80.000000       0.000000  \n",
              "25%       22.630000      4.800000           100.000000       0.000000  \n",
              "50%       27.320000      5.800000           140.000000       0.000000  \n",
              "75%       29.220000      6.200000           159.000000       0.000000  \n",
              "max       95.690000      9.000000           300.000000       1.000000  "
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-f0c78d33-9deb-44ae-8c82-b1de42f48d76\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>year</th>\n",
              "      <th>age</th>\n",
              "      <th>race</th>\n",
              "      <th>hypertension</th>\n",
              "      <th>heart_disease</th>\n",
              "      <th>bmi</th>\n",
              "      <th>hbA1c_level</th>\n",
              "      <th>blood_glucose_level</th>\n",
              "      <th>diabetes</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>count</th>\n",
              "      <td>99090.000000</td>\n",
              "      <td>99095.000000</td>\n",
              "      <td>99099.000000</td>\n",
              "      <td>99085.000000</td>\n",
              "      <td>99102.000000</td>\n",
              "      <td>99159.000000</td>\n",
              "      <td>79027.000000</td>\n",
              "      <td>69458.000000</td>\n",
              "      <td>100000.000000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>mean</th>\n",
              "      <td>2018.360067</td>\n",
              "      <td>41.885719</td>\n",
              "      <td>2.995146</td>\n",
              "      <td>0.074734</td>\n",
              "      <td>0.039464</td>\n",
              "      <td>25.936491</td>\n",
              "      <td>5.527778</td>\n",
              "      <td>138.019868</td>\n",
              "      <td>0.085000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>std</th>\n",
              "      <td>1.345802</td>\n",
              "      <td>22.518101</td>\n",
              "      <td>1.416911</td>\n",
              "      <td>0.262963</td>\n",
              "      <td>0.194698</td>\n",
              "      <td>8.811963</td>\n",
              "      <td>1.069702</td>\n",
              "      <td>40.608440</td>\n",
              "      <td>0.278883</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>min</th>\n",
              "      <td>2015.000000</td>\n",
              "      <td>0.080000</td>\n",
              "      <td>1.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>3.500000</td>\n",
              "      <td>80.000000</td>\n",
              "      <td>0.000000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>25%</th>\n",
              "      <td>2019.000000</td>\n",
              "      <td>24.000000</td>\n",
              "      <td>2.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>22.630000</td>\n",
              "      <td>4.800000</td>\n",
              "      <td>100.000000</td>\n",
              "      <td>0.000000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>50%</th>\n",
              "      <td>2019.000000</td>\n",
              "      <td>43.000000</td>\n",
              "      <td>3.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>27.320000</td>\n",
              "      <td>5.800000</td>\n",
              "      <td>140.000000</td>\n",
              "      <td>0.000000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>75%</th>\n",
              "      <td>2019.000000</td>\n",
              "      <td>60.000000</td>\n",
              "      <td>4.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>29.220000</td>\n",
              "      <td>6.200000</td>\n",
              "      <td>159.000000</td>\n",
              "      <td>0.000000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>max</th>\n",
              "      <td>2022.000000</td>\n",
              "      <td>80.000000</td>\n",
              "      <td>5.000000</td>\n",
              "      <td>1.000000</td>\n",
              "      <td>1.000000</td>\n",
              "      <td>95.690000</td>\n",
              "      <td>9.000000</td>\n",
              "      <td>300.000000</td>\n",
              "      <td>1.000000</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-f0c78d33-9deb-44ae-8c82-b1de42f48d76')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-f0c78d33-9deb-44ae-8c82-b1de42f48d76 button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-f0c78d33-9deb-44ae-8c82-b1de42f48d76');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "<div id=\"df-ec7a0b84-e175-485a-aae1-fb5acbb75ded\">\n",
              "  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-ec7a0b84-e175-485a-aae1-fb5acbb75ded')\"\n",
              "            title=\"Suggest charts\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "  </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "  <script>\n",
              "    async function quickchart(key) {\n",
              "      const quickchartButtonEl =\n",
              "        document.querySelector('#' + key + ' button');\n",
              "      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "      quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "      try {\n",
              "        const charts = await google.colab.kernel.invokeFunction(\n",
              "            'suggestCharts', [key], {});\n",
              "      } catch (error) {\n",
              "        console.error('Error during call to suggestCharts:', error);\n",
              "      }\n",
              "      quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "    }\n",
              "    (() => {\n",
              "      let quickchartButtonEl =\n",
              "        document.querySelector('#df-ec7a0b84-e175-485a-aae1-fb5acbb75ded button');\n",
              "      quickchartButtonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "    })();\n",
              "  </script>\n",
              "</div>\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe",
              "summary": "{\n  \"name\": \"df\",\n  \"rows\": 8,\n  \"fields\": [\n    {\n      \"column\": \"year\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 34429.0090441173,\n        \"min\": 1.3458015087295776,\n        \"max\": 99090.0,\n        \"num_unique_values\": 6,\n        \"samples\": [\n          99090.0,\n          2018.3600666061157,\n          2022.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"age\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 35021.66971656605,\n        \"min\": 0.08,\n        \"max\": 99095.0,\n        \"num_unique_values\": 8,\n        \"samples\": [\n          41.885718956556836,\n          43.0,\n          99095.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"race\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 35035.80702223538,\n        \"min\": 1.0,\n        \"max\": 99099.0,\n        \"num_unique_values\": 8,\n        \"samples\": [\n          2.9951462678735408,\n          3.0,\n          99099.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"hypertension\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 35031.77014472894,\n        \"min\": 0.0,\n        \"max\": 99085.0,\n        \"num_unique_values\": 5,\n        \"samples\": [\n          0.07473381440177625,\n          1.0,\n          0.26296267656477273\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"heart_disease\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 35037.785781633116,\n        \"min\": 0.0,\n        \"max\": 99102.0,\n        \"num_unique_values\": 5,\n        \"samples\": [\n          0.039464390224213435,\n          1.0,\n          0.1946980601771783\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"bmi\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 35047.42553612223,\n        \"min\": 0.0,\n        \"max\": 99159.0,\n        \"num_unique_values\": 8,\n        \"samples\": [\n          25.936490787523066,\n          27.32,\n          99159.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"hbA1c_level\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 27938.450793860655,\n        \"min\": 1.0697022609047389,\n        \"max\": 79027.0,\n        \"num_unique_values\": 8,\n        \"samples\": [\n          5.52777784807724,\n          5.8,\n          79027.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"blood_glucose_level\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 24508.863279525372,\n        \"min\": 40.60843969641259,\n        \"max\": 69458.0,\n        \"num_unique_values\": 8,\n        \"samples\": [\n          138.01986812174263,\n          140.0,\n          69458.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"diabetes\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 35355.27017448386,\n        \"min\": 0.0,\n        \"max\": 100000.0,\n        \"num_unique_values\": 5,\n        \"samples\": [\n          0.085,\n          1.0,\n          0.2788830897668106\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"
            }
          },
          "metadata": {},
          "execution_count": 4
        }
      ],
      "source": [
        "df.describe()"
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "df.info()"
      ],
      "metadata": {
        "id": "Bp-zyn3nF3m5",
        "outputId": "005d36db-c757-4c9a-f35b-cbb9dbcac5db",
        "colab": {
          "base_uri": "https://localhost:8080/"
        }
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "<class 'pandas.core.frame.DataFrame'>\n",
            "RangeIndex: 100000 entries, 0 to 99999\n",
            "Data columns (total 12 columns):\n",
            " #   Column               Non-Null Count   Dtype  \n",
            "---  ------               --------------   -----  \n",
            " 0   year                 99090 non-null   float64\n",
            " 1   gender               99097 non-null   object \n",
            " 2   age                  99095 non-null   float64\n",
            " 3   location             99096 non-null   object \n",
            " 4   race                 99099 non-null   float64\n",
            " 5   hypertension         99085 non-null   float64\n",
            " 6   heart_disease        99102 non-null   float64\n",
            " 7   smoking_history      99096 non-null   object \n",
            " 8   bmi                  99159 non-null   float64\n",
            " 9   hbA1c_level          79027 non-null   float64\n",
            " 10  blood_glucose_level  69458 non-null   float64\n",
            " 11  diabetes             100000 non-null  int64  \n",
            "dtypes: float64(8), int64(1), object(3)\n",
            "memory usage: 9.2+ MB\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "_XWb2m-qDwmL"
      },
      "source": [
        "## Exploratory data analysis\n",
        "\n",
        "Section for exploratory data analysis, to address **Tasks 1.1 and 1.2**.\n",
        "\n",
        "**OBS:** You may need to do some data cleaning before you do your full exploratory data analysis, though you will find that some functions we'll cover in this unit are able to handle things like missing values and non-numeric data.\n",
        "\n",
        "**Create more cells as needed!**"
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "df.isnull()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 424
        },
        "id": "Y4NHG7h_ZBbx",
        "outputId": "f69adb72-ae6f-48c4-bcf1-5f4e283f22d4"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "        year  gender    age  location   race  hypertension  heart_disease  \\\n",
              "0      False   False  False     False  False         False          False   \n",
              "1      False   False  False     False  False         False          False   \n",
              "2      False   False  False     False  False         False          False   \n",
              "3      False   False  False     False  False         False          False   \n",
              "4      False   False  False     False  False         False          False   \n",
              "...      ...     ...    ...       ...    ...           ...            ...   \n",
              "99995  False   False  False     False  False         False          False   \n",
              "99996  False   False  False     False  False         False          False   \n",
              "99997  False   False  False     False  False         False          False   \n",
              "99998  False   False  False     False  False         False          False   \n",
              "99999  False   False  False     False  False         False          False   \n",
              "\n",
              "       smoking_history    bmi  hbA1c_level  blood_glucose_level  diabetes  \n",
              "0                False  False         True                False     False  \n",
              "1                False  False         True                False     False  \n",
              "2                False  False        False                False     False  \n",
              "3                False  False        False                 True     False  \n",
              "4                False  False        False                 True     False  \n",
              "...                ...    ...          ...                  ...       ...  \n",
              "99995            False  False        False                 True     False  \n",
              "99996            False  False         True                False     False  \n",
              "99997            False  False         True                False     False  \n",
              "99998            False  False        False                 True     False  \n",
              "99999            False  False        False                False     False  \n",
              "\n",
              "[100000 rows x 12 columns]"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-9bd6a0e6-5b65-45af-854c-e36bfe981266\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>year</th>\n",
              "      <th>gender</th>\n",
              "      <th>age</th>\n",
              "      <th>location</th>\n",
              "      <th>race</th>\n",
              "      <th>hypertension</th>\n",
              "      <th>heart_disease</th>\n",
              "      <th>smoking_history</th>\n",
              "      <th>bmi</th>\n",
              "      <th>hbA1c_level</th>\n",
              "      <th>blood_glucose_level</th>\n",
              "      <th>diabetes</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>True</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>True</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>True</td>\n",
              "      <td>False</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>True</td>\n",
              "      <td>False</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>...</th>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>99995</th>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>True</td>\n",
              "      <td>False</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>99996</th>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>True</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>99997</th>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>True</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>99998</th>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>True</td>\n",
              "      <td>False</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>99999</th>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "<p>100000 rows × 12 columns</p>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-9bd6a0e6-5b65-45af-854c-e36bfe981266')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-9bd6a0e6-5b65-45af-854c-e36bfe981266 button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-9bd6a0e6-5b65-45af-854c-e36bfe981266');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "<div id=\"df-60edfc6d-fb94-44c3-a347-9d8bcdb0e272\">\n",
              "  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-60edfc6d-fb94-44c3-a347-9d8bcdb0e272')\"\n",
              "            title=\"Suggest charts\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "  </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "  <script>\n",
              "    async function quickchart(key) {\n",
              "      const quickchartButtonEl =\n",
              "        document.querySelector('#' + key + ' button');\n",
              "      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "      quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "      try {\n",
              "        const charts = await google.colab.kernel.invokeFunction(\n",
              "            'suggestCharts', [key], {});\n",
              "      } catch (error) {\n",
              "        console.error('Error during call to suggestCharts:', error);\n",
              "      }\n",
              "      quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "    }\n",
              "    (() => {\n",
              "      let quickchartButtonEl =\n",
              "        document.querySelector('#df-60edfc6d-fb94-44c3-a347-9d8bcdb0e272 button');\n",
              "      quickchartButtonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "    })();\n",
              "  </script>\n",
              "</div>\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe",
              "summary": "{\n  \"name\": \"df\",\n  \"rows\": 100000,\n  \"fields\": [\n    {\n      \"column\": \"year\",\n      \"properties\": {\n        \"dtype\": \"boolean\",\n        \"num_unique_values\": 2,\n        \"samples\": [\n          true,\n          false\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"gender\",\n      \"properties\": {\n        \"dtype\": \"boolean\",\n        \"num_unique_values\": 2,\n        \"samples\": [\n          true,\n          false\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"age\",\n      \"properties\": {\n        \"dtype\": \"boolean\",\n        \"num_unique_values\": 2,\n        \"samples\": [\n          true,\n          false\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"location\",\n      \"properties\": {\n        \"dtype\": \"boolean\",\n        \"num_unique_values\": 2,\n        \"samples\": [\n          true,\n          false\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"race\",\n      \"properties\": {\n        \"dtype\": \"boolean\",\n        \"num_unique_values\": 2,\n        \"samples\": [\n          true,\n          false\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"hypertension\",\n      \"properties\": {\n        \"dtype\": \"boolean\",\n        \"num_unique_values\": 2,\n        \"samples\": [\n          true,\n          false\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"heart_disease\",\n      \"properties\": {\n        \"dtype\": \"boolean\",\n        \"num_unique_values\": 2,\n        \"samples\": [\n          true,\n          false\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"smoking_history\",\n      \"properties\": {\n        \"dtype\": \"boolean\",\n        \"num_unique_values\": 2,\n        \"samples\": [\n          true,\n          false\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"bmi\",\n      \"properties\": {\n        \"dtype\": \"boolean\",\n        \"num_unique_values\": 2,\n        \"samples\": [\n          true,\n          false\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"hbA1c_level\",\n      \"properties\": {\n        \"dtype\": \"boolean\",\n        \"num_unique_values\": 2,\n        \"samples\": [\n          false,\n          true\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"blood_glucose_level\",\n      \"properties\": {\n        \"dtype\": \"boolean\",\n        \"num_unique_values\": 2,\n        \"samples\": [\n          true,\n          false\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"diabetes\",\n      \"properties\": {\n        \"dtype\": \"boolean\",\n        \"num_unique_values\": 1,\n        \"samples\": [\n          false\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"
            }
          },
          "metadata": {},
          "execution_count": 6
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "df.isnull().sum()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 461
        },
        "id": "b_85f4eMZMbp",
        "outputId": "6d1c521e-963e-4e17-b5d7-44611f4f2cec"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "year                     910\n",
              "gender                   903\n",
              "age                      905\n",
              "location                 904\n",
              "race                     901\n",
              "hypertension             915\n",
              "heart_disease            898\n",
              "smoking_history          904\n",
              "bmi                      841\n",
              "hbA1c_level            20973\n",
              "blood_glucose_level    30542\n",
              "diabetes                   0\n",
              "dtype: int64"
            ],
            "text/html": [
              "<div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>0</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>year</th>\n",
              "      <td>910</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>gender</th>\n",
              "      <td>903</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>age</th>\n",
              "      <td>905</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>location</th>\n",
              "      <td>904</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>race</th>\n",
              "      <td>901</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>hypertension</th>\n",
              "      <td>915</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>heart_disease</th>\n",
              "      <td>898</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>smoking_history</th>\n",
              "      <td>904</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>bmi</th>\n",
              "      <td>841</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>hbA1c_level</th>\n",
              "      <td>20973</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>blood_glucose_level</th>\n",
              "      <td>30542</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>diabetes</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div><br><label><b>dtype:</b> int64</label>"
            ]
          },
          "metadata": {},
          "execution_count": 7
        }
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "ExecuteTime": {
          "end_time": "2023-07-03T15:47:41.983038Z",
          "start_time": "2023-07-03T15:47:41.952118Z"
        },
        "id": "sBrquKY4DwmO",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "2af18302-cd5f-4d27-e472-0e3e54ad84e9"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "\n",
            "Information about the class\n",
            "\n",
            "count    100000.000000\n",
            "mean          0.085000\n",
            "std           0.278883\n",
            "min           0.000000\n",
            "25%           0.000000\n",
            "50%           0.000000\n",
            "75%           0.000000\n",
            "max           1.000000\n",
            "Name: diabetes, dtype: float64 \n",
            "\n",
            "diabetes\n",
            "0    91500\n",
            "1     8500\n",
            "Name: count, dtype: int64\n"
          ]
        }
      ],
      "source": [
        "print(\"\\nInformation about the class\\n\")\n",
        "print(df['diabetes'].describe(),\"\\n\")\n",
        "print(df['diabetes'].value_counts())"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "lTwEwmgqDwmQ",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 495
        },
        "outputId": "32c37ea8-0ae2-4d97-c0c6-fa036580e93d"
      },
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "<Axes: >"
            ]
          },
          "metadata": {},
          "execution_count": 9
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 640x480 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ],
      "source": [
        "plt.figure()\n",
        "plt.suptitle('Missing Values In Rows')\n",
        "plt.xlabel('Values')\n",
        "df.isnull().sum(axis=1).value_counts().sort_index(ascending=False).plot(kind=\"barh\")"
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "df.duplicated().value_counts()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 148
        },
        "id": "plCuIr9uP3OF",
        "outputId": "4f79c846-15b6-4d48-ac39-d9d818a01010"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "False    99418\n",
              "True       582\n",
              "Name: count, dtype: int64"
            ],
            "text/html": [
              "<div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>count</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>False</th>\n",
              "      <td>99418</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>True</th>\n",
              "      <td>582</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div><br><label><b>dtype:</b> int64</label>"
            ]
          },
          "metadata": {},
          "execution_count": 10
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "plt.figure()\n",
        "\n",
        "diabetes_counts = df['diabetes'].value_counts()\n",
        "diabetes_counts.index = diabetes_counts.index.map({0: \"False\", 1: \"True\"})\n",
        "\n",
        "diabetes_counts.plot(\n",
        "    kind=\"pie\",\n",
        "    autopct='%1.1f%%',\n",
        "    startangle=90,\n",
        "    labels=diabetes_counts.index\n",
        ")\n",
        "\n",
        "plt.title('Diabetes Status Distribution')\n",
        "plt.ylabel('')\n",
        "plt.show()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 428
        },
        "id": "Rps2dWJsQLf-",
        "outputId": "22dee96b-d4c8-4a2a-8693-e1d69ea6e37c"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 640x480 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "plt.figure()\n",
        "df['diabetes'].value_counts().plot(kind=\"bar\", color='lightgreen', edgecolor='black')\n",
        "plt.xticks(ticks=[0, 1], labels=[\"False\", \"True\"], rotation=0)\n",
        "plt.xlabel(\"Diabetes\")\n",
        "plt.ylabel(\"Count\")\n",
        "plt.title(\"Diabetes Distribution\")\n",
        "plt.show()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 472
        },
        "id": "j-570zdJYX-J",
        "outputId": "8ba467fe-34a0-4f66-9d80-09a122d3f3d3"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 640x480 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "df.isnull().sum()\n",
        "missing_values = df.isnull().sum()\n",
        "plt.figure(figsize=(20, 6))\n",
        "sns.barplot(x=missing_values.index, y=missing_values.values, palette='coolwarm')"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 646
        },
        "id": "lQ_e9oX-WzAL",
        "outputId": "cc7c36ab-ec76-49db-e443-372fcbdbd588"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "<ipython-input-13-cf83daa07165>:4: FutureWarning: \n",
            "\n",
            "Passing `palette` without assigning `hue` is deprecated and will be removed in v0.14.0. Assign the `x` variable to `hue` and set `legend=False` for the same effect.\n",
            "\n",
            "  sns.barplot(x=missing_values.index, y=missing_values.values, palette='coolwarm')\n"
          ]
        },
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "<Axes: xlabel='None'>"
            ]
          },
          "metadata": {},
          "execution_count": 13
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 2000x600 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "plt.figure(figsize=(10, 6))\n",
        "color = {'boxes': 'black', 'whiskers': 'red', 'medians': 'blue', 'caps': 'green'}\n",
        "\n",
        "box_plot = df[['age', 'bmi', 'hbA1c_level', 'blood_glucose_level']].plot.box(\n",
        "    color=color, sym='r+', figsize=(10, 6)\n",
        ")\n",
        "box_plot.set_title('Box Plot of Age, bmi, hbA1c Level and Blood Glucose Level')\n",
        "box_plot.set_ylabel('Values')\n",
        "plt.show()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 562
        },
        "id": "4n1JK2WEZr_a",
        "outputId": "5904ebbd-147d-4d99-8a12-3c064e4acb48"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 1000x600 with 0 Axes>"
            ]
          },
          "metadata": {}
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 1000x600 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "plt.figure();\n",
        "\n",
        "color = {'boxes' : 'black', 'whiskers' : 'red', 'medians' : 'blue', 'caps' : 'green'}\n",
        "\n",
        "box_plot =df[['hbA1c_level']].plot.box(color=color, sym='r+');\n",
        "box_plot.set_title('Box Plot of hbA1c Level');\n",
        "box_plot.set_ylabel('')"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 487
        },
        "id": "lO-zjFCoh6Ff",
        "outputId": "c1095a55-da52-4fc8-af9f-c3298846643d"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "Text(0, 0.5, '')"
            ]
          },
          "metadata": {},
          "execution_count": 15
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 640x480 with 0 Axes>"
            ]
          },
          "metadata": {}
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 640x480 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "plt.figure(figsize=(8, 5))\n",
        "\n",
        "box_plot = df[['year', 'race', 'hypertension', 'heart_disease', 'diabetes']].plot.box(\n",
        "    color=color, sym='r+', figsize=(8, 5)\n",
        ")\n",
        "box_plot.set_title('Box Plot of Year, Race, Hypertension, Heart Disease and Diabetes')\n",
        "box_plot.set_ylabel('Values')\n",
        "plt.show()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 485
        },
        "id": "lyss3HcRZwCx",
        "outputId": "a1b496d6-9008-4438-87f2-abe15dd92c4b"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 800x500 with 0 Axes>"
            ]
          },
          "metadata": {}
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 800x500 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "plt.figure();\n",
        "\n",
        "color = {'boxes' : 'black', 'whiskers' : 'red', 'medians' : 'blue', 'caps' : 'green'}\n",
        "\n",
        "box_plot =df[['race']].plot.box(color=color, sym='r+');\n",
        "box_plot.set_title('Box Plot of Race');\n",
        "box_plot.set_ylabel('')"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 487
        },
        "id": "B3kDfacziKGO",
        "outputId": "55add44b-9fff-4388-db6d-029a89be5faf"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "Text(0, 0.5, '')"
            ]
          },
          "metadata": {},
          "execution_count": 17
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 640x480 with 0 Axes>"
            ]
          },
          "metadata": {}
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 640x480 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "plt.figure();\n",
        "\n",
        "color = {'boxes' : 'black', 'whiskers' : 'red', 'medians' : 'blue', 'caps' : 'green'}\n",
        "\n",
        "box_plot =df[['year']].plot.box(color=color, sym='r+');\n",
        "box_plot.set_title('Box Plot of Year');\n",
        "box_plot.set_ylabel('')"
      ],
      "metadata": {
        "id": "1EpZgp3SjkzH",
        "outputId": "ab6f8de7-8758-4040-9707-5fb1ec7071b0",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 487
        }
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "Text(0, 0.5, '')"
            ]
          },
          "metadata": {},
          "execution_count": 18
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 640x480 with 0 Axes>"
            ]
          },
          "metadata": {}
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 640x480 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "corr = df.corr(method='pearson', numeric_only=True)\n",
        "print (corr)\n",
        "\n",
        "corr = df.corr(method='spearman', numeric_only=True)\n",
        "print (\"\\n\",corr)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "IznivCRdbncZ",
        "outputId": "4c8a48fb-d90e-4c2b-8770-d3d9af612249"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "                         year       age      race  hypertension  \\\n",
            "year                 1.000000 -0.003241  0.004194     -0.004069   \n",
            "age                 -0.003241  1.000000 -0.003425      0.251453   \n",
            "race                 0.004194 -0.003425  1.000000     -0.003115   \n",
            "hypertension        -0.004069  0.251453 -0.003115      1.000000   \n",
            "heart_disease        0.001899  0.233597 -0.003323      0.121546   \n",
            "bmi                  0.003323  0.242341 -0.003180      0.103370   \n",
            "hbA1c_level          0.000833  0.102205 -0.000469      0.080226   \n",
            "blood_glucose_level  0.001875  0.105796 -0.004325      0.078534   \n",
            "diabetes            -0.003517  0.257886 -0.007053      0.198310   \n",
            "\n",
            "                     heart_disease       bmi  hbA1c_level  \\\n",
            "year                      0.001899  0.003323     0.000833   \n",
            "age                       0.233597  0.242341     0.102205   \n",
            "race                     -0.003323 -0.003180    -0.000469   \n",
            "hypertension              0.121546  0.103370     0.080226   \n",
            "heart_disease             1.000000  0.041182     0.064676   \n",
            "bmi                       0.041182  1.000000     0.056842   \n",
            "hbA1c_level               0.064676  0.056842     1.000000   \n",
            "blood_glucose_level       0.063398  0.064434     0.169857   \n",
            "diabetes                  0.171410  0.151056     0.400567   \n",
            "\n",
            "                     blood_glucose_level  diabetes  \n",
            "year                            0.001875 -0.003517  \n",
            "age                             0.105796  0.257886  \n",
            "race                           -0.004325 -0.007053  \n",
            "hypertension                    0.078534  0.198310  \n",
            "heart_disease                   0.063398  0.171410  \n",
            "bmi                             0.064434  0.151056  \n",
            "hbA1c_level                     0.169857  0.400567  \n",
            "blood_glucose_level             1.000000  0.415592  \n",
            "diabetes                        0.415592  1.000000  \n",
            "\n",
            "                          year       age      race  hypertension  \\\n",
            "year                 1.000000 -0.002598  0.003640     -0.003749   \n",
            "age                 -0.002598  1.000000 -0.003101      0.254489   \n",
            "race                 0.003640 -0.003101  1.000000     -0.003108   \n",
            "hypertension        -0.003749  0.254489 -0.003108      1.000000   \n",
            "heart_disease        0.001521  0.234670 -0.003315      0.121546   \n",
            "bmi                  0.000299  0.317222 -0.002748      0.131786   \n",
            "hbA1c_level          0.002070  0.084870 -0.000861      0.065395   \n",
            "blood_glucose_level  0.002179  0.070148 -0.004743      0.052377   \n",
            "diabetes            -0.004077  0.261949 -0.007053      0.198310   \n",
            "\n",
            "                     heart_disease       bmi  hbA1c_level  \\\n",
            "year                      0.001521  0.000299     0.002070   \n",
            "age                       0.234670  0.317222     0.084870   \n",
            "race                     -0.003315 -0.002748    -0.000861   \n",
            "hypertension              0.121546  0.131786     0.065395   \n",
            "heart_disease             1.000000  0.061533     0.053141   \n",
            "bmi                       0.061533  1.000000     0.057173   \n",
            "hbA1c_level               0.053141  0.057173     1.000000   \n",
            "blood_glucose_level       0.039638  0.051055     0.093548   \n",
            "diabetes                  0.171410  0.178494     0.328346   \n",
            "\n",
            "                     blood_glucose_level  diabetes  \n",
            "year                            0.002179 -0.004077  \n",
            "age                             0.070148  0.261949  \n",
            "race                           -0.004743 -0.007053  \n",
            "hypertension                    0.052377  0.198310  \n",
            "heart_disease                   0.039638  0.171410  \n",
            "bmi                             0.051055  0.178494  \n",
            "hbA1c_level                     0.093548  0.328346  \n",
            "blood_glucose_level             1.000000  0.270765  \n",
            "diabetes                        0.270765  1.000000  \n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "UfzvASbUDwmQ"
      },
      "source": [
        "## Task 2.1 - ML Workflow to Critically Evaluate"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "ExecuteTime": {
          "end_time": "2023-10-06T12:15:57.551333Z",
          "start_time": "2023-10-06T12:15:57.539681Z"
        },
        "id": "OAz2ZhDvDwmQ",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "26a3ed8c-cb10-449c-beb1-43fce1b949a4"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "<ipython-input-20-d3c05b3d5a77>:6: SettingWithCopyWarning: \n",
            "A value is trying to be set on a copy of a slice from a DataFrame.\n",
            "Try using .loc[row_indexer,col_indexer] = value instead\n",
            "\n",
            "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
            "  df[cat_columns] = df[cat_columns].apply(lambda x: x.astype('category')) # converting 'object' columns to 'category' type\n",
            "<ipython-input-20-d3c05b3d5a77>:7: SettingWithCopyWarning: \n",
            "A value is trying to be set on a copy of a slice from a DataFrame.\n",
            "Try using .loc[row_indexer,col_indexer] = value instead\n",
            "\n",
            "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
            "  df[cat_columns] = df[cat_columns].apply(lambda x: x.cat.codes) # converting the 'category' columns to integer encoded values\n"
          ]
        }
      ],
      "source": [
        "# Dropping all rows with missing values\n",
        "df = df.dropna()\n",
        "\n",
        "# Converting all non-numeric (object) features to numeric\n",
        "cat_columns = df.select_dtypes(['object']).columns\n",
        "df[cat_columns] = df[cat_columns].apply(lambda x: x.astype('category')) # converting 'object' columns to 'category' type\n",
        "df[cat_columns] = df[cat_columns].apply(lambda x: x.cat.codes) # converting the 'category' columns to integer encoded values"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "ExecuteTime": {
          "end_time": "2023-10-06T12:15:57.581379Z",
          "start_time": "2023-10-06T12:15:57.552134Z"
        },
        "id": "gHTba_ntDwmR",
        "outputId": "bc0ed906-b241-472e-f274-11d36f887cc4",
        "colab": {
          "base_uri": "https://localhost:8080/"
        }
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "[[10027   112]\n",
            " [  345   579]]\n",
            "\n",
            "Accuracy (Testing):  0.96 \n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "/usr/local/lib/python3.10/dist-packages/sklearn/linear_model/_logistic.py:465: ConvergenceWarning: lbfgs failed to converge (status=1):\n",
            "STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.\n",
            "\n",
            "Increase the number of iterations (max_iter) or scale the data as shown in:\n",
            "    https://scikit-learn.org/stable/modules/preprocessing.html\n",
            "Please also refer to the documentation for alternative solver options:\n",
            "    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression\n",
            "  n_iter_i = _check_optimize_result(\n"
          ]
        }
      ],
      "source": [
        "# Splits the Pandas DataFrame into a feature matrix (X) and class/label vector (y)\n",
        "X = df.iloc[:,:len(df.columns)-1]\n",
        "y = df.iloc[:,len(df.columns)-1]\n",
        "\n",
        "# Splitting dataset for hold-out validation\n",
        "X_train, X_test, y_train, y_test = train_test_split(X, # feature matrix\n",
        "                                                    y, # label vector\n",
        "                                                    test_size=0.2,\n",
        "                                                    random_state=1,\n",
        "                                                    stratify=None\n",
        "                                                   )\n",
        "\n",
        "# Creating and testing a Logistic Regression Model\n",
        "model = LogisticRegression()\n",
        "\n",
        "# Training the model\n",
        "model.fit(X_train, y_train)\n",
        "\n",
        "# Testing the model\n",
        "y_pred = model.predict(X_test)\n",
        "\n",
        "# Printing out confusion matrix and accuracy\n",
        "print(metrics.confusion_matrix(y_test, y_pred))\n",
        "print(\"\\nAccuracy (Testing):  %0.2f \" % (metrics.accuracy_score(y_test, y_pred)))"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "Mii_94ogDwmS"
      },
      "source": [
        "## Task 2.3 - Evaluation of Improved ML Workflow\n",
        "\n",
        "Add code for running your **improved** machine learning experiments below.\n"
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# Loading the dataset again, for you to do your own pre-processing (instead of what was done above)\n",
        "df = pd.read_csv('/content/drive/MyDrive/Assignment 2 - Machine Learning/Data/diabetes_dataset_100k.csv')"
      ],
      "metadata": {
        "id": "qVsVDfrsNFJd"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "#Handling Missing Values\n",
        "\n",
        "from sklearn.impute import SimpleImputer\n",
        "\n",
        "if df.empty:\n",
        "    raise ValueError(\"The dataframe 'df' is empty. Please check your data.\")\n",
        "\n",
        "#Select Numeric And Categorical Columns\n",
        "numeric_cols = df.select_dtypes(include=['float64', 'int64']).columns\n",
        "categorical_cols = df.select_dtypes(include=['object']).columns\n",
        "\n",
        "#Impute Missing Numeric Columns With The Mean\n",
        "if len(numeric_cols) > 0:\n",
        "    imputer = SimpleImputer(strategy='mean')\n",
        "    df[numeric_cols] = imputer.fit_transform(df[numeric_cols])\n",
        "\n",
        "#Impute Missing Categorical Columns With The Most Frequent Value\n",
        "if len(categorical_cols) > 0:\n",
        "    categorical_imputer = SimpleImputer(strategy='most_frequent')\n",
        "    df[categorical_cols] = categorical_imputer.fit_transform(df[categorical_cols])"
      ],
      "metadata": {
        "id": "zrFcidQpOGSR"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "#Drop Duplicates\n",
        "dd = df.drop_duplicates()"
      ],
      "metadata": {
        "id": "2uFAvoolOVYf"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "#Dataset Missing Values\n",
        "df.isnull().sum()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 461
        },
        "id": "Y02UuMjbOZtw",
        "outputId": "db7da95c-88b0-4b36-804a-d71adc30fa5a"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "year                   0\n",
              "gender                 0\n",
              "age                    0\n",
              "location               0\n",
              "race                   0\n",
              "hypertension           0\n",
              "heart_disease          0\n",
              "smoking_history        0\n",
              "bmi                    0\n",
              "hbA1c_level            0\n",
              "blood_glucose_level    0\n",
              "diabetes               0\n",
              "dtype: int64"
            ],
            "text/html": [
              "<div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>0</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>year</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>gender</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>age</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>location</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>race</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>hypertension</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>heart_disease</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>smoking_history</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>bmi</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>hbA1c_level</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>blood_glucose_level</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>diabetes</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div><br><label><b>dtype:</b> int64</label>"
            ]
          },
          "metadata": {},
          "execution_count": 7
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "#Dataset Attributes\n",
        "#(Brownlee, 2020)\n",
        "\n",
        "from collections import Counter\n",
        "from matplotlib import pyplot\n",
        "from numpy import where\n",
        "\n",
        "X = df.drop('diabetes', axis=1).values\n",
        "y = df['diabetes'].values\n",
        "\n",
        "counter = Counter(y)\n",
        "print(counter)\n",
        "\n",
        "for label, _ in counter.items():\n",
        "    row_ix = where(y == label)[0]\n",
        "    pyplot.scatter(X[row_ix, 0], X[row_ix, 1], label=str(label))\n",
        "pyplot.legend()\n",
        "pyplot.show()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 447
        },
        "id": "YupDTShPhV5k",
        "outputId": "87ea02a0-cd3e-413f-c0e4-eee454290993"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Counter({0.0: 91500, 1.0: 8500})\n"
          ]
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 640x480 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "#Dataset Noise Points\n",
        "\n",
        "from sklearn.preprocessing import LabelEncoder, StandardScaler\n",
        "from imblearn.over_sampling import SMOTE\n",
        "from sklearn.cluster import DBSCAN\n",
        "\n",
        "print(df.columns)\n",
        "\n",
        "numeric_cols = df.select_dtypes(include=['float64', 'int64']).columns\n",
        "categorical_cols = df.select_dtypes(include=['object']).columns\n",
        "\n",
        "for col in categorical_cols:\n",
        "    le = LabelEncoder()\n",
        "    df[col] = le.fit_transform(df[col])\n",
        "\n",
        "X = df.drop('diabetes', axis=1)\n",
        "y = df['diabetes']\n",
        "\n",
        "smote = SMOTE(random_state=42)\n",
        "X_resampled, y_resampled = smote.fit_resample(X, y)\n",
        "\n",
        "scaler = StandardScaler()\n",
        "X_resampled_scaled = scaler.fit_transform(X_resampled)\n",
        "\n",
        "db = DBSCAN(eps=0.5, min_samples=5)\n",
        "y_dbscan = db.fit_predict(X_resampled_scaled)\n",
        "\n",
        "X_resampled['cluster'] = y_dbscan\n",
        "\n",
        "noise_count = (y_dbscan == -1).sum()\n",
        "print(f\"Number of noise points: {noise_count}\")\n",
        "print(f\"Original dataset shape: {X.shape}\")\n",
        "print(f\"Resampled dataset shape: {X_resampled.shape}\")"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "He1ujsm0ylwM",
        "outputId": "0f828723-d991-4249-ae75-6d3dd2d40d00"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Index(['year', 'gender', 'age', 'location', 'race', 'hypertension',\n",
            "       'heart_disease', 'smoking_history', 'bmi', 'hbA1c_level',\n",
            "       'blood_glucose_level', 'diabetes'],\n",
            "      dtype='object')\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "/usr/local/lib/python3.10/dist-packages/sklearn/base.py:474: FutureWarning: `BaseEstimator._validate_data` is deprecated in 1.6 and will be removed in 1.7. Use `sklearn.utils.validation.validate_data` instead. This function becomes public and is part of the scikit-learn developer API.\n",
            "  warnings.warn(\n",
            "/usr/local/lib/python3.10/dist-packages/sklearn/utils/_tags.py:354: FutureWarning: The SMOTE or classes from which it inherits use `_get_tags` and `_more_tags`. Please define the `__sklearn_tags__` method, or inherit from `sklearn.base.BaseEstimator` and/or other appropriate mixins such as `sklearn.base.TransformerMixin`, `sklearn.base.ClassifierMixin`, `sklearn.base.RegressorMixin`, and `sklearn.base.OutlierMixin`. From scikit-learn 1.7, not defining `__sklearn_tags__` will raise an error.\n",
            "  warnings.warn(\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Number of noise points: 109275\n",
            "Original dataset shape: (100000, 11)\n",
            "Resampled dataset shape: (183000, 12)\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "#Handoing Dataset Noise Points\n",
        "\n",
        "numeric_cols = df.select_dtypes(include=['float64', 'int64']).columns\n",
        "categorical_cols = df.select_dtypes(include=['object']).columns\n",
        "\n",
        "for col in categorical_cols:\n",
        "    le = LabelEncoder()\n",
        "    df[col] = le.fit_transform(df[col])\n",
        "\n",
        "X = df.drop('diabetes', axis=1)\n",
        "y = df['diabetes']\n",
        "\n",
        "scaler = StandardScaler()\n",
        "X_scaled = scaler.fit_transform(X)\n",
        "\n",
        "db = DBSCAN(eps=0.5, min_samples=5)\n",
        "y_dbscan = db.fit_predict(X_scaled)\n",
        "\n",
        "X_clean = X[y_dbscan != -1]\n",
        "y_clean = y[y_dbscan != -1]\n",
        "\n",
        "smote = SMOTE(random_state=42)\n",
        "X_resampled, y_resampled = smote.fit_resample(X_clean, y_clean)\n",
        "\n",
        "noise_count = len(X) - len(X_clean)\n",
        "print(f\"Number of noise points removed: {noise_count}\")\n",
        "print(f\"Original dataset shape: {X.shape}\")\n",
        "print(f\"Resampled dataset shape: {X_resampled.shape}\")"
      ],
      "metadata": {
        "id": "GAygfotC1ty7",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "1a1b382f-ebb2-4df0-dff5-cae7735bf83b"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Number of noise points removed: 70217\n",
            "Original dataset shape: (100000, 11)\n",
            "Resampled dataset shape: (57854, 11)\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "/usr/local/lib/python3.10/dist-packages/sklearn/base.py:474: FutureWarning: `BaseEstimator._validate_data` is deprecated in 1.6 and will be removed in 1.7. Use `sklearn.utils.validation.validate_data` instead. This function becomes public and is part of the scikit-learn developer API.\n",
            "  warnings.warn(\n",
            "/usr/local/lib/python3.10/dist-packages/sklearn/utils/_tags.py:354: FutureWarning: The SMOTE or classes from which it inherits use `_get_tags` and `_more_tags`. Please define the `__sklearn_tags__` method, or inherit from `sklearn.base.BaseEstimator` and/or other appropriate mixins such as `sklearn.base.TransformerMixin`, `sklearn.base.ClassifierMixin`, `sklearn.base.RegressorMixin`, and `sklearn.base.OutlierMixin`. From scikit-learn 1.7, not defining `__sklearn_tags__` will raise an error.\n",
            "  warnings.warn(\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "#Dataset Noise Points\n",
        "#(Scikit Learn, n.d.)\n",
        "\n",
        "features = df[['age', 'bmi', 'hbA1c_level', 'blood_glucose_level']].copy()\n",
        "\n",
        "features.fillna(features.mean(), inplace=True)\n",
        "\n",
        "scaler = StandardScaler()\n",
        "scaled_features = scaler.fit_transform(features)\n",
        "\n",
        "db = DBSCAN(eps=0.5, min_samples=5)\n",
        "df['cluster'] = db.fit_predict(scaled_features)\n",
        "\n",
        "df.loc[df['cluster'] == -1, ['age', 'bmi', 'hbA1c_level', 'blood_glucose_level']] = 0\n",
        "\n",
        "noise_count = len(df[df['cluster'] == -1])\n",
        "print(f'Number of noise points: {noise_count}')"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "Nfd4i-ps3QK4",
        "outputId": "858634ac-9db7-4931-b18c-5a6a68e21daf"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Number of noise points: 626\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "#Dataset Noise Points\n",
        "noise_count = np.sum(df['cluster'] == -1)\n",
        "print(f'Number of noise points: {noise_count}')"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "2a1580b7-cc83-4f30-9391-828d8d728e12",
        "id": "k6JwSYUJ3QgF"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Number of noise points: 626\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "#Handling Dataset Noise\n",
        "#Assissted By ChatGPT (OpenAI, 2022)\n",
        "\n",
        "from sklearn.preprocessing import StandardScaler\n",
        "from sklearn.cluster import DBSCAN\n",
        "\n",
        "features = df[['age', 'bmi', 'hbA1c_level', 'blood_glucose_level']].copy()\n",
        "\n",
        "features.fillna(features.mean(), inplace=True)\n",
        "\n",
        "scaler = StandardScaler()\n",
        "scaled_features = scaler.fit_transform(features)\n",
        "\n",
        "db = DBSCAN(eps=0.5, min_samples=5)\n",
        "df['cluster'] = db.fit_predict(scaled_features)\n",
        "\n",
        "noise_data = df[df['cluster'] == -1]\n",
        "\n",
        "noise_count = len(noise_data)\n",
        "print(f'Number of noise points: {noise_count}')\n",
        "\n",
        "plt.figure(figsize=(10, 6))\n",
        "\n",
        "plt.scatter(df['age'], df['bmi'], c=df['cluster'], cmap='viridis', label='Data Points')\n",
        "\n",
        "plt.scatter(noise_data['age'], noise_data['bmi'], color='red', label='Noise', alpha=0.5)\n",
        "\n",
        "plt.title('Scatter Plot of Data Points with Noise')\n",
        "plt.xlabel('Age')\n",
        "plt.ylabel('BMI')\n",
        "plt.legend()\n",
        "plt.show()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 581
        },
        "id": "P50K3Pju4Lj3",
        "outputId": "bab0cee3-11cb-449a-ba72-12d28b73599a"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Number of noise points: 0\n"
          ]
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 1000x600 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "#Scatterplot Showing Noise Points\n",
        "#(Scikit Learn, n.d.)\n",
        "\n",
        "data = pd.DataFrame({\n",
        "    'x': np.random.rand(1000)*100,\n",
        "    'y': np.random.rand(1000)*100,\n",
        "    'label': np.random.choice(['age', 'bmi', 'hbA1c_level', 'blood_glucose_level'], 1000)\n",
        "})\n",
        "\n",
        "scaler = StandardScaler()\n",
        "scaled_data = scaler.fit_transform(data[['x', 'y']])\n",
        "\n",
        "db = DBSCAN(eps=1, min_samples=10)\n",
        "data['cluster'] = db.fit_predict(scaled_data)\n",
        "\n",
        "noise_data = data[data['cluster'] == -1]\n",
        "\n",
        "plt.figure(figsize=(10,6))\n",
        "plt.scatter(noise_data['x'], noise_data['y'], color='gray', label='Noise', alpha=0.5)\n",
        "\n",
        "plt.title('Scatterplot Showing Only Noise Points')\n",
        "plt.xlabel('X Axis')\n",
        "plt.ylabel('Y Axis')\n",
        "plt.legend()\n",
        "\n",
        "plt.show()\n",
        "\n",
        "print(f'Number of noise points: {len(noise_data)}')"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 581
        },
        "id": "GEBftyGH4Hks",
        "outputId": "2022eab7-7199-480d-ef9d-7bd7e07965f3"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 1000x600 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Number of noise points: 0\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "3lSCgtoeDwmS"
      },
      "outputs": [],
      "source": [
        "# Loading the dataset again, for you to do your own pre-processing (instead of what was done above)\n",
        "df = pd.read_csv('/content/drive/MyDrive/Assignment 2 - Machine Learning/Data/diabetes_dataset_100k.csv')"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "AxFFPXJbDwmS",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "f503b499-947c-4416-ac55-4ded4b0c8ec8"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "     year  gender   age location  race  hypertension  heart_disease  \\\n",
            "0  2020.0  Female  32.0  Alabama   5.0           0.0            0.0   \n",
            "1  2015.0  Female  29.0  Alabama   2.0           0.0            0.0   \n",
            "2  2015.0    Male  18.0  Alabama   5.0           0.0            0.0   \n",
            "3  2015.0    Male  41.0  Alabama   3.0           0.0            0.0   \n",
            "4  2016.0  Female  52.0  Alabama   1.0           0.0            0.0   \n",
            "\n",
            "  smoking_history    bmi  hbA1c_level  blood_glucose_level  diabetes  \n",
            "0           never  27.32          NaN                100.0         0  \n",
            "1           never  19.95          NaN                 90.0         0  \n",
            "2           never  23.76          4.8                160.0         0  \n",
            "3           never  27.32          4.0                  NaN         0  \n",
            "4           never  23.75          6.5                  NaN         0  \n"
          ]
        }
      ],
      "source": [
        "print(df.head())"
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "#Random Forest Model\n",
        "\n",
        "from sklearn.metrics import accuracy_score, confusion_matrix, recall_score\n",
        "from sklearn.model_selection import StratifiedKFold, cross_val_score\n",
        "\n",
        "X = df.drop('diabetes', axis=1)\n",
        "y = df['diabetes']\n",
        "\n",
        "cv = StratifiedKFold(n_splits=5, random_state=42, shuffle=True)\n",
        "\n",
        "numeric_cols = X.select_dtypes(include=['float64', 'int64']).columns\n",
        "scaler = StandardScaler()\n",
        "X_scaled = scaler.fit_transform(X[numeric_cols])\n",
        "\n",
        "param_distributions = {\n",
        "    'n_estimators': [100, 200],\n",
        "    'max_depth': [None, 10, 20],\n",
        "    'min_samples_split': [2, 10],\n",
        "    'min_samples_leaf': [1, 2, 4],\n",
        "    'bootstrap': [True, False]\n",
        "}"
      ],
      "metadata": {
        "id": "zqvlXX-ELHDd"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "#(Scikit-Learn, 2024)\n",
        "\n",
        "rf_model = RandomForestClassifier(random_state=42)\n",
        "\n",
        "random_search = RandomizedSearchCV(\n",
        "    rf_model,\n",
        "    param_distributions,\n",
        "    n_iter=10,\n",
        "    cv=3,\n",
        "    verbose=2,\n",
        "    n_jobs=-1,\n",
        "    random_state=42\n",
        ")"
      ],
      "metadata": {
        "id": "4JpDZLjGMfX0"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "random_search.fit(X_scaled, y)\n",
        "best_model = random_search.best_estimator_"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "SDz0ZIDZLFsQ",
        "outputId": "7ed7d212-0bca-47e5-8c2f-880c86999244"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Fitting 3 folds for each of 10 candidates, totalling 30 fits\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "cv_scores = cross_val_score(best_model, X_scaled, y, cv=cv, scoring='accuracy')"
      ],
      "metadata": {
        "id": "uix6MiwoLIqd"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "accuracy = np.mean(cv_scores)\n",
        "conf_matrix = confusion_matrix(y, best_model.predict(X_scaled))\n",
        "recall = recall_score(y, best_model.predict(X_scaled), average='macro')\n",
        "\n",
        "print(f\"Accuracy: {accuracy * 100:.2f}%\")\n",
        "print(\"Confusion Matrix:\")\n",
        "print(conf_matrix)\n",
        "print(f\"Recall: {recall * 100:.2f}%\")\n",
        "print(f\"Best hyperparameters: {random_search.best_params_}\")"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "LTuCdJpKLL8E",
        "outputId": "3ffa89e9-183a-45a3-ddb1-c0795d350b7d"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Accuracy: 95.98%\n",
            "Confusion Matrix:\n",
            "[[91499     1]\n",
            " [ 3980  4520]]\n",
            "Recall: 76.59%\n",
            "Best hyperparameters: {'n_estimators': 100, 'min_samples_split': 10, 'min_samples_leaf': 2, 'max_depth': 10, 'bootstrap': True}\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# Loading the dataset again, for you to do your own pre-processing (instead of what was done above)\n",
        "df = pd.read_csv('/content/drive/MyDrive/Assignment 2 - Machine Learning/Data/diabetes_dataset_100k.csv')"
      ],
      "metadata": {
        "id": "Y-U44VUNRJcd"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "print(df.head())"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "PUj3i16QRRD8",
        "outputId": "9252a8b6-b6d0-49f9-bfee-0b6726961050"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "     year  gender   age location  race  hypertension  heart_disease  \\\n",
            "0  2020.0  Female  32.0  Alabama   5.0           0.0            0.0   \n",
            "1  2015.0  Female  29.0  Alabama   2.0           0.0            0.0   \n",
            "2  2015.0    Male  18.0  Alabama   5.0           0.0            0.0   \n",
            "3  2015.0    Male  41.0  Alabama   3.0           0.0            0.0   \n",
            "4  2016.0  Female  52.0  Alabama   1.0           0.0            0.0   \n",
            "\n",
            "  smoking_history    bmi  hbA1c_level  blood_glucose_level  diabetes  \n",
            "0           never  27.32          NaN                100.0         0  \n",
            "1           never  19.95          NaN                 90.0         0  \n",
            "2           never  23.76          4.8                160.0         0  \n",
            "3           never  27.32          4.0                  NaN         0  \n",
            "4           never  23.75          6.5                  NaN         0  \n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "#Decision Trees Model\n",
        "\n",
        "X = df.drop('diabetes', axis=1)\n",
        "y = df['diabetes']\n",
        "\n",
        "cv = StratifiedKFold(n_splits=5, random_state=42, shuffle=True)\n",
        "\n",
        "categorical_cols = X.select_dtypes(include=['object']).columns\n",
        "label_encoders = {}"
      ],
      "metadata": {
        "id": "6u3GLIlfUm4K"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "for col in categorical_cols:\n",
        "    le = LabelEncoder()\n",
        "    X[col] = le.fit_transform(X[col])\n",
        "    label_encoders[col] = le\n",
        "\n",
        "numeric_cols = X.select_dtypes(include=['float64', 'int64']).columns\n",
        "scaler = StandardScaler()\n",
        "X_scaled = scaler.fit_transform(X[numeric_cols])\n",
        "\n",
        "dt_model = DecisionTreeClassifier(random_state=42, max_depth=5)\n",
        "\n",
        "accuracies = []\n",
        "recalls = []\n",
        "conf_matrices = []"
      ],
      "metadata": {
        "id": "kDZugFlTU_JO"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "for train_index, test_index in cv.split(X_scaled, y):\n",
        "\n",
        "    X_train, X_test = X_scaled[train_index], X_scaled[test_index]\n",
        "    y_train, y_test = y.iloc[train_index], y.iloc[test_index]\n",
        "\n",
        "    dt_model.fit(X_train, y_train)\n",
        "\n",
        "    y_pred = dt_model.predict(X_test)\n",
        "\n",
        "    accuracy = accuracy_score(y_test, y_pred)\n",
        "    recall = recall_score(y_test, y_pred, average='macro')\n",
        "    conf_matrix = confusion_matrix(y_test, y_pred)\n",
        "\n",
        "    accuracies.append(accuracy)\n",
        "    recalls.append(recall)\n",
        "    conf_matrices.append(conf_matrix)"
      ],
      "metadata": {
        "id": "mg7R0R5RVEsQ"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "from sklearn.tree import export_text\n",
        "\n",
        "mean_accuracy = np.mean(accuracies)\n",
        "mean_recall = np.mean(recalls)\n",
        "mean_conf_matrix = np.mean(conf_matrices, axis=0)\n",
        "\n",
        "print(f\"Test Accuracy: {mean_accuracy * 100:.2f}%\")\n",
        "print(\"Confusion Matrix:\")\n",
        "print(mean_conf_matrix)\n",
        "print(f\"Recall: {mean_recall * 100:.2f}%\")\n",
        "\n",
        "numeric_cols = X.select_dtypes(include=['float64', 'int64']).columns\n",
        "print(\"\\nDecision Tree Rules:\")\n",
        "print(export_text(dt_model, feature_names=list(numeric_cols)))"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "kYVm7BlPVPt9",
        "outputId": "278e000e-9f21-4a5f-f233-8f8e5ce95a3d"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Test Accuracy: 95.99%\n",
            "Confusion Matrix:\n",
            "[[18300.      0. ]\n",
            " [  802.4   897.6]]\n",
            "Recall: 76.40%\n",
            "\n",
            "Decision Tree Rules:\n",
            "|--- hbA1c_level <= 1.10\n",
            "|   |--- blood_glucose_level <= 1.77\n",
            "|   |   |--- age <= 0.56\n",
            "|   |   |   |--- hypertension <= 1.62\n",
            "|   |   |   |   |--- bmi <= 1.51\n",
            "|   |   |   |   |   |--- class: 0\n",
            "|   |   |   |   |--- bmi >  1.51\n",
            "|   |   |   |   |   |--- class: 0\n",
            "|   |   |   |--- hypertension >  1.62\n",
            "|   |   |   |   |--- hbA1c_level <= -0.17\n",
            "|   |   |   |   |   |--- class: 0\n",
            "|   |   |   |   |--- hbA1c_level >  -0.17\n",
            "|   |   |   |   |   |--- class: 0\n",
            "|   |   |--- age >  0.56\n",
            "|   |   |   |--- hbA1c_level <= -0.17\n",
            "|   |   |   |   |--- class: 0\n",
            "|   |   |   |--- hbA1c_level >  -0.17\n",
            "|   |   |   |   |--- blood_glucose_level <= -0.62\n",
            "|   |   |   |   |   |--- class: 0\n",
            "|   |   |   |   |--- blood_glucose_level >  -0.62\n",
            "|   |   |   |   |   |--- class: 0\n",
            "|   |--- blood_glucose_level >  1.77\n",
            "|   |   |--- class: 1\n",
            "|--- hbA1c_level >  1.10\n",
            "|   |--- class: 1\n",
            "\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# Loading the dataset again, for you to do your own pre-processing (instead of what was done above)\n",
        "df = pd.read_csv('/content/drive/MyDrive/Assignment 2 - Machine Learning/Data/diabetes_dataset_100k.csv')"
      ],
      "metadata": {
        "id": "cdk0D7s5dUsQ"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "print(df.head())"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "FwFaITIydagy",
        "outputId": "df6c6f03-4dd8-4c30-8f7a-25673f2c3874"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "     year  gender   age location  race  hypertension  heart_disease  \\\n",
            "0  2020.0  Female  32.0  Alabama   5.0           0.0            0.0   \n",
            "1  2015.0  Female  29.0  Alabama   2.0           0.0            0.0   \n",
            "2  2015.0    Male  18.0  Alabama   5.0           0.0            0.0   \n",
            "3  2015.0    Male  41.0  Alabama   3.0           0.0            0.0   \n",
            "4  2016.0  Female  52.0  Alabama   1.0           0.0            0.0   \n",
            "\n",
            "  smoking_history    bmi  hbA1c_level  blood_glucose_level  diabetes  \n",
            "0           never  27.32          NaN                100.0         0  \n",
            "1           never  19.95          NaN                 90.0         0  \n",
            "2           never  23.76          4.8                160.0         0  \n",
            "3           never  27.32          4.0                  NaN         0  \n",
            "4           never  23.75          6.5                  NaN         0  \n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "#KNN Model\n",
        "\n",
        "from sklearn.impute import SimpleImputer\n",
        "\n",
        "X = df.drop('diabetes', axis=1)\n",
        "y = df['diabetes']\n",
        "\n",
        "if X.isnull().any().any():\n",
        "    print(\"NaN values detected. Dropping rows with NaN values.\")\n",
        "    df = df.dropna()\n",
        "    X = df.drop('diabetes', axis=1)\n",
        "    y = df['diabetes']\n",
        "else:\n",
        "    print(\"No NaN values detected in the features.\")\n",
        "\n",
        "categorical_cols = X.select_dtypes(include=['object']).columns\n",
        "for col in categorical_cols:\n",
        "    le = LabelEncoder()\n",
        "    X[col] = le.fit_transform(X[col])\n",
        "\n",
        "scaler = StandardScaler()\n",
        "X_scaled = scaler.fit_transform(X)"
      ],
      "metadata": {
        "id": "8WrRgaRqdzQf",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "cbf99ba6-a468-4877-b6fb-f09db48e6b97"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "NaN values detected. Dropping rows with NaN values.\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "categorical_cols = X.select_dtypes(include=['object']).columns\n",
        "for col in categorical_cols:\n",
        "    le = LabelEncoder()\n",
        "    X[col] = le.fit_transform(X[col])"
      ],
      "metadata": {
        "id": "eYE2_kl_IRWm"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "scaler = StandardScaler()\n",
        "X_scaled = scaler.fit_transform(X)"
      ],
      "metadata": {
        "id": "udZ7w1KXwWJY"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "if np.any(np.isnan(X_scaled)):\n",
        "    print(\"There are NaN values after scaling. Check scaling process.\")\n",
        "else:\n",
        "    print(\"No NaN values after scaling.\")"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "3mH5uiMQtRdI",
        "outputId": "06f53194-7542-4ca2-dd19-fb15c67c50dd"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "No NaN values after scaling.\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "knn_model = KNeighborsClassifier(n_neighbors=5)\n",
        "\n",
        "cv = StratifiedKFold(n_splits=5, random_state=42, shuffle=True)"
      ],
      "metadata": {
        "id": "gwQNd7dWtUOL"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "accuracies = []\n",
        "recalls = []\n",
        "conf_matrices = []\n",
        "\n",
        "for train_index, test_index in cv.split(X_scaled, y):\n",
        "    X_train, X_test = X_scaled[train_index], X_scaled[test_index]\n",
        "    y_train, y_test = y.iloc[train_index], y.iloc[test_index]\n",
        "\n",
        "    knn_model.fit(X_train, y_train)\n",
        "\n",
        "    y_pred = knn_model.predict(X_test)\n",
        "\n",
        "    accuracy = accuracy_score(y_test, y_pred)\n",
        "    recall = recall_score(y_test, y_pred, average='macro')\n",
        "    conf_matrix = confusion_matrix(y_test, y_pred)\n",
        "\n",
        "    accuracies.append(accuracy)\n",
        "    recalls.append(recall)\n",
        "    conf_matrices.append(conf_matrix)"
      ],
      "metadata": {
        "id": "Zl-qbandwgmG"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "mean_accuracy = np.mean(accuracies)\n",
        "mean_recall = np.mean(recalls)\n",
        "mean_conf_matrix = np.mean(conf_matrices, axis=0)\n",
        "\n",
        "print(f\"Test Accuracy: {mean_accuracy * 100:.2f}%\")\n",
        "print(\"Confusion Matrix:\")\n",
        "print(mean_conf_matrix)\n",
        "print(f\"Recall: {mean_recall * 100:.2f}%\")"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "F2JckXvww5Zm",
        "outputId": "b9ba25ee-fb86-40d8-e4a2-6efb7cc7657a"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Test Accuracy: 95.55%\n",
            "Confusion Matrix:\n",
            "[[10059.2    74. ]\n",
            " [  418.    511.4]]\n",
            "Recall: 77.15%\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "#Results Table\n",
        "\n",
        "model_names = ['Logistic Regression', 'Random Forest', 'Decision Tree', 'KNN']\n",
        "accuracy = [0.96, 0.96, 0.96, 0.94]\n",
        "recall = [0.76, 0.76, 0.76, 0.73]\n",
        "precision = [0.75, 0.85, 0.83, 0.81]\n",
        "\n",
        "results_df = pd.DataFrame({\n",
        "    'Model': model_names,\n",
        "    'Accuracy': accuracy,\n",
        "    'Recall': recall,\n",
        "    'Precision': precision\n",
        "})\n",
        "\n",
        "print(results_df)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "XF5Go_MYXrZ7",
        "outputId": "9837bc31-6e63-42a1-ce7d-cd1020f613f9"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "                 Model  Accuracy  Recall  Precision\n",
            "0  Logistic Regression      0.96    0.76       0.75\n",
            "1        Random Forest      0.96    0.76       0.85\n",
            "2        Decision Tree      0.96    0.76       0.83\n",
            "3                  KNN      0.94    0.73       0.81\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "model_names = ['Logistic Regression', 'Random Forest', 'Decision Tree', 'KNN']\n",
        "accuracy = [0.96, 0.96, 0.96, 0.96]\n",
        "recall = [0.76, 0.76, 0.76, 0.76]\n",
        "precision = [0.75, 0.85, 0.83, 0.81]\n",
        "\n",
        "x = np.arange(len(model_names))\n",
        "\n",
        "width = 0.2\n",
        "\n",
        "fig, ax = plt.subplots(figsize=(10, 6))\n",
        "\n",
        "ax.bar(x - width, accuracy, width, label='Accuracy')\n",
        "ax.bar(x, recall, width, label='Recall')\n",
        "ax.bar(x + width, precision, width, label='Precision')\n",
        "\n",
        "ax.set_xlabel('Models')\n",
        "ax.set_ylabel('Scores')\n",
        "ax.set_title('Comparison of Model Performance')\n",
        "ax.set_xticks(x)\n",
        "ax.set_xticklabels(model_names)\n",
        "ax.legend()\n",
        "\n",
        "plt.show()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 564
        },
        "id": "Kjlmq0ac5-lp",
        "outputId": "ce4a8526-0a9c-4e61-d31f-c50252b9d962"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 1000x600 with 1 Axes>"
            ],
            "image/png": "iVBORw0KGgoAAAANSUhEUgAAA04AAAIjCAYAAAA0vUuxAAAAOXRFWHRTb2Z0d2FyZQBNYXRwbG90bGliIHZlcnNpb24zLjguMCwgaHR0cHM6Ly9tYXRwbG90bGliLm9yZy81sbWrAAAACXBIWXMAAA9hAAAPYQGoP6dpAABdXklEQVR4nO3deVgV5f//8dcB2RFwBVQU9yURdyMzNxKXLMvSzBL3zHBNc/mUuJRbuaapmYJZlrlmrimJuX3VNNfMfctUNBMVFwTm94c/T55ARxA9qM/HdZ1Lzz33zLxnYM7hdWbmPhbDMAwBAAAAAO7Iwd4FAAAAAEBWR3ACAAAAABMEJwAAAAAwQXACAAAAABMEJwAAAAAwQXACAAAAABMEJwAAAAAwQXACAAAAABMEJwAAAAAwQXACgMeIxWLRwIED7V3GfZs5c6ZKlSolJycn+fj42LucVI4ePSqLxaLo6Oh0zxsbGyuLxaLY2NhMr+t+fPLJJypSpIgcHR1Vvnx5e5cDAFkOwQnAY+XQoUN6++23VaRIEbm6usrLy0vVq1fXuHHjdPXqVXuXh3vwxx9/qHXr1ipatKimTp2qL7744o59Bw4cKIvFIgcHB504cSLV9IsXL8rNzU0Wi0UREREPsuxMFx0dLYvFYn24urqqRIkSioiI0JkzZzJ1XT/99JPef/99Va9eXVFRURo6dGimLh8AHgfZ7F0AAGSWJUuW6LXXXpOLi4tatWqlsmXLKjExUevWrVPv3r21Z8+eu/4R/ji4evWqsmV7tF/aY2NjlZKSonHjxqlYsWL3NI+Li4u+/fZbvf/++zbt8+fPfxAlPlSDBw9W4cKFde3aNa1bt06TJk3S0qVLtXv3brm7u2fKOn7++Wc5ODho2rRpcnZ2zpRlAsDj5tF+dwWA/+/IkSN6/fXXVahQIf3888/y9/e3Tnv33Xd18OBBLVmyxI4VPjgpKSlKTEyUq6urXF1d7V3OfYuLi5OkdF2i17BhwzSD06xZs9SoUSPNmzcvM0t8qBo0aKDKlStLktq3b69cuXJp9OjR+uGHH9SiRYv7WvaVK1fk7u6uuLg4ubm5ZVpoMgxD165dk5ubW6YsDwCyAi7VA/BYGDlypC5fvqxp06bZhKZbihUrpm7dulmfJyUlaciQISpatKhcXFwUGBio/v376/r16zbzBQYG6oUXXlBsbKwqV64sNzc3BQUFWe9PmT9/voKCguTq6qpKlSrpt99+s5m/devW8vT01OHDhxUWFiYPDw/ly5dPgwcPlmEYNn0//fRTPfPMM8qVK5fc3NxUqVIlzZ07N9W23Lrs7JtvvtFTTz0lFxcXLV++3Drt9nucLl26pO7duyswMFAuLi7Kmzevnn/+eW3bts1mmXPmzFGlSpXk5uam3Llz680339TJkyfT3JaTJ0+qSZMm8vT0VJ48edSrVy8lJyff4Sdj6/PPP7fWnC9fPr377ru6cOGCzf6OjIyUJOXJk+ee79l64403tH37dv3xxx/WttOnT+vnn3/WG2+8keY8cXFxateunXx9feXq6qrg4GDNmDEjVb8LFy6odevW8vb2lo+Pj8LDw21qvt0ff/yhV199VTlz5pSrq6sqV66sRYsWmdafHnXq1JF088OCW77++mvrzy9nzpx6/fXXU126WKtWLZUtW1Zbt27Vc889J3d3d/Xv318Wi0VRUVFKSEiwXhZ4696t9B4nK1assB4nU6ZMsd7P9f3332vQoEHKnz+/smfPrldffVXx8fG6fv26unfvrrx588rT01Nt2rRJteyoqCjVqVNHefPmlYuLi8qUKaNJkyal2i+3ali3bp2qVq0qV1dXFSlSRF999VWqvhcuXFCPHj2sx0WBAgXUqlUrnTt3ztrn+vXrioyMVLFixeTi4qKAgAC9//77qeoD8AQxAOAxkD9/fqNIkSL33D88PNyQZLz66qvGxIkTjVatWhmSjCZNmtj0K1SokFGyZEnD39/fGDhwoDFmzBgjf/78hqenp/H1118bBQsWNIYPH24MHz7c8Pb2NooVK2YkJyfbrMfV1dUoXry48dZbbxkTJkwwXnjhBUOS8eGHH9qsq0CBAkbnzp2NCRMmGKNHjzaqVq1qSDIWL15s00+SUbp0aSNPnjzGoEGDjIkTJxq//fabdVpkZKS17xtvvGE4OzsbPXv2NL788ktjxIgRRuPGjY2vv/7a2icqKsqQZFSpUsUYM2aM0bdvX8PNzc0IDAw0/vnnn1Tb8tRTTxlt27Y1Jk2aZDRt2tSQZHz++eem+zwyMtKQZISGhhqfffaZERERYTg6OhpVqlQxEhMTDcMwjAULFhgvv/yyIcmYNGmSMXPmTGPHjh2my4yLizMKFChgs0/Hjh1reHt7G9euXTMkGe+++6512pUrV4zSpUsbTk5ORo8ePYzx48cbNWrUMCQZY8eOtfZLSUkxnnvuOcPBwcHo3Lmz8dlnnxl16tQxypUrZ0gyoqKirH13795teHt7G2XKlDFGjBhhTJgwwXjuuecMi8VizJ8/39pv9erVhiRj9erVd91ft34uW7ZssWkfN26cIcmYPHmyYRiG8dFHHxkWi8Vo3ry58fnnnxuDBg0ycufOnernV7NmTcPPz8/IkyeP0aVLF2PKlCnGwoULjZkzZxo1atQwXFxcjJkzZxozZ840Dh06ZBhG+o6TYsWKGTly5DD69u1rTJ482Vi9erV1W8uXL2+EhIQY48ePN7p27WpYLBbj9ddfN9544w2jQYMGxsSJE4233nrLkGQMGjTIZtlVqlQxWrdubYwZM8b47LPPjHr16hmSjAkTJqSqoWTJkoavr6/Rv39/Y8KECUbFihUNi8Vi7N6929rv0qVLRtmyZQ1HR0ejQ4cOxqRJk4whQ4YYVapUsR5HycnJRr169Qx3d3eje/fuxpQpU4yIiAgjW7ZsxksvvXTXnxuAxxfBCcAjLz4+3pB0z3/QbN++3ZBktG/f3qa9V69ehiTj559/trYVKlTIkGRs2LDB2rZixQpDkuHm5mYcO3bM2j5lypRUfxDf+sOzS5cu1raUlBSjUaNGhrOzs3H27Flr+5UrV2zqSUxMNMqWLWvUqVPHpl2S4eDgYOzZsyfVtv03OHl7e9sEhv9KTEw08ubNa5QtW9a4evWqtX3x4sWGJGPAgAGptmXw4ME2y6hQoYJRqVKlO67DMAwjLi7OcHZ2NurVq2cTLCdMmGBIMqZPn25tuxWGbt83d3J73169ehnFihWzTqtSpYrRpk0bwzCMVMFp7NixhiSbAJmYmGiEhIQYnp6exsWLFw3DMIyFCxcakoyRI0da+yUlJVlD1u3BqW7dukZQUJBx7do1a1tKSorxzDPPGMWLF7e2pTc4rVq1yjh79qxx4sQJ47vvvjNy5cpluLm5GX/++adx9OhRw9HR0fj4449t5t21a5eRLVs2m/aaNWvaBK7bhYeHGx4eHjZtGTlOli9fbtP31raWLVvWGo4NwzBatGhhWCwWo0GDBjb9Q0JCjEKFCtm0/fe4MAzDCAsLS/VBya0afvnlF2tbXFyc4eLiYrz33nvWtgEDBhiSbMLsLSkpKYZhGMbMmTMNBwcHY+3atTbTJ0+ebEgy1q9fn2peAI8/LtUD8Mi7ePGiJCl79uz31H/p0qWSpJ49e9q0v/fee5KU6l6oMmXKKCQkxPq8WrVqkm5eMlWwYMFU7YcPH061zttHdLt1qV1iYqJWrVplbb/9fpB//vlH8fHxqlGjRqrL6iSpZs2aKlOmjMmW3rxPaNOmTfrrr7/SnP7rr78qLi5OnTt3trk/qlGjRipVqlSa94V16tTJ5nmNGjXS3ObbrVq1SomJierevbscHP596+nQoYO8vLwy5f6zN954QwcPHtSWLVus/97pMr2lS5fKz8/P5h4hJycnde3aVZcvX9aaNWus/bJly6Z33nnH2s/R0VFdunSxWd758+f1888/q1mzZrp06ZLOnTunc+fO6e+//1ZYWJgOHDiQ6tLHexUaGqo8efIoICBAr7/+ujw9PbVgwQLlz59f8+fPV0pKipo1a2Zd57lz5+Tn56fixYtr9erVNstycXFRmzZt7mm96T1OChcurLCwsDSX1apVKzk5OVmfV6tWTYZhqG3btjb9qlWrphMnTigpKcnadvtxER8fr3PnzqlmzZo6fPiw4uPjbeYvU6aMatSoYX2eJ08elSxZ0ub3c968eQoODtbLL7+cqk6LxSLp5qWrpUuXVqlSpWz2663LJP+7XwE8GRgcAsAjz8vLS9LN+3nuxbFjx+Tg4JBqxDY/Pz/5+Pjo2LFjNu23hyNJ8vb2liQFBASk2f7PP//YtDs4OKhIkSI2bSVKlJB08/uAblm8eLE++ugjbd++3eY+ilt/zN2ucOHCd9y+240cOVLh4eEKCAhQpUqV1LBhQ7Vq1cpaz61tLVmyZKp5S5UqpXXr1tm0ubq6Kk+ePDZtOXLkSLXN/3Wn9Tg7O6tIkSKp9nlGVKhQQaVKldKsWbPk4+MjPz8/6x+6adVTvHhxmxAnSaVLl7ap99ixY/L395enp6dNv/9ux8GDB2UYhj788EN9+OGHaa4zLi5O+fPnT/d2TZw4USVKlFC2bNnk6+urkiVLWus+cOCADMNQ8eLF05z39rAiSfnz57/nASDSe5zc7XcyPcdQSkqK4uPjlStXLknS+vXrFRkZqY0bN+rKlSs2/ePj463LSms9Uurfz0OHDqlp06Z3rFW6uV/37t2b6nf9llsDmAB4shCcADzyvLy8lC9fPu3evTtd86UVSNLi6OiYrnbjP4M+3Iu1a9fqxRdf1HPPPafPP/9c/v7+cnJyUlRUlGbNmpWq/72OVtasWTPVqFFDCxYs0E8//aRPPvlEI0aM0Pz589WgQYN013mnbc4q3njjDU2aNEnZs2dX8+bNUwWjByUlJUWS1KtXrzuedbnXodX/q2rVqtZR9dJar8Vi0bJly9L82fw38GVklLt7PU7utuyMHkOHDh1S3bp1VapUKY0ePVoBAQFydnbW0qVLNWbMGOt+v9fl3auUlBQFBQVp9OjRaU7/b+AD8GQgOAF4LLzwwgv64osvtHHjRpvL6tJSqFAhpaSk6MCBA9YzDJJ05swZXbhwQYUKFcrU2lJSUnT48GHrWSZJ2r9/v6SbI4FJNy8fcnV11YoVK+Ti4mLtFxUVdd/r9/f3V+fOndW5c2fFxcWpYsWK+vjjj9WgQQPrtu7bty/V2Zl9+/Zl2r64fT23n31LTEzUkSNHFBoaminreeONNzRgwACdOnVKM2fOvGs9O3fuVEpKik24ujUq3616CxUqpJiYGF2+fNkmhOzbt89mebe2ycnJKdO25V4ULVpUhmGocOHCNr9fmeFhHydp+fHHH3X9+nUtWrTI5mzS/VwqV7RoUdMPWYoWLaodO3aobt269xwcATz+uMcJwGPh/fffl4eHh9q3b68zZ86kmn7o0CGNGzdO0s3v/JGksWPH2vS59elyo0aNMr2+CRMmWP9vGIYmTJggJycn1a1bV9LNT8otFovNsN5Hjx7VwoULM7zO5OTkVPeA5M2bV/ny5bNeCli5cmXlzZtXkydPtrk8cNmyZdq7d2+m7YvQ0FA5Oztr/PjxNp/+T5s2TfHx8Zm2nqJFi2rs2LEaNmyYqlatesd+DRs21OnTpzV79mxrW1JSkj777DN5enqqZs2a1n5JSUk2w18nJyfrs88+s1le3rx5VatWLU2ZMkWnTp1Ktb6zZ8/e76al6ZVXXpGjo6MGDRqU6qyKYRj6+++/M7xsexwn/3XrDNLt2xYfH39fHyg0bdpUO3bs0IIFC1JNu7WeZs2a6eTJk5o6dWqqPlevXlVCQkKG1w/g0cUZJwCPhaJFi2rWrFlq3ry5SpcurVatWqls2bJKTEzUhg0bNGfOHLVu3VqSFBwcrPDwcH3xxRe6cOGCatasqc2bN2vGjBlq0qSJateunam1ubq6avny5QoPD1e1atW0bNkyLVmyRP3797feQ9GoUSONHj1a9evX1xtvvKG4uDhNnDhRxYoV086dOzO03kuXLqlAgQJ69dVXFRwcLE9PT61atUpbtmzRqFGjJN08QzJixAi1adNGNWvWVIsWLXTmzBmNGzdOgYGB6tGjR6bsgzx58qhfv34aNGiQ6tevrxdffFH79u3T559/ripVqujNN9/MlPVIsvm+rjvp2LGjpkyZotatW2vr1q0KDAzU3LlztX79eo0dO9Y60Ejjxo1VvXp19e3bV0ePHlWZMmU0f/78VIFUunkv0rPPPqugoCB16NBBRYoU0ZkzZ7Rx40b9+eef2rFjR6Zt4y1FixbVRx99pH79+uno0aNq0qSJsmfPriNHjmjBggXq2LGjevXqlaFlP+zjJC316tWTs7OzGjdurLfffluXL1/W1KlTlTdv3jQD6r3o3bu35s6dq9dee01t27ZVpUqVdP78eS1atEiTJ09WcHCw3nrrLX3//ffq1KmTVq9ererVqys5OVl//PGHvv/+e+v3VQF4shCcADw2XnzxRe3cuVOffPKJfvjhB02aNEkuLi4qV66cRo0apQ4dOlj7fvnllypSpIiio6O1YMEC+fn5qV+/ftYvX81Mjo6OWr58ud555x317t1b2bNnV2RkpAYMGGDtU6dOHU2bNk3Dhw9X9+7dVbhwYY0YMUJHjx7NcHByd3dX586d9dNPP1lHXytWrJg+//xzm1HiWrduLXd3dw0fPlx9+vSRh4eHXn75ZY0YMUI+Pj73u/lWAwcOVJ48eTRhwgT16NFDOXPmVMeOHTV06NBUgxg8aG5uboqNjVXfvn01Y8YMXbx4USVLllRUVJQ1YEs3B/ZYtGiRunfvrq+//loWi0UvvviiRo0apQoVKtgss0yZMvr11181aNAgRUdH6++//1bevHlVoUIFm591Zuvbt69KlCihMWPGaNCgQZJu3oNTr149vfjii/e17Id5nKSlZMmSmjt3rj744AP16tVLfn5+euedd5QnT55UI/LdK09PT61du1aRkZFasGCBZsyYobx586pu3boqUKCApJs/94ULF2rMmDH66quvtGDBArm7u6tIkSLq1q1bpl8WCeDRYDEychczAOCetG7dWnPnztXly5ftXQoAALgP3OMEAAAAACYITgAAAABgguAEAAAAACa4xwkAAAAATHDGCQAAAABMEJwAAAAAwIRdv8fpl19+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6WYYi4iIkL+/v1xdXVWoUCENGzYszb6StGvXLtWpU0dubm7KlSuXOnbsqMuXL1un36r5008/lb+/v3LlyqV3331XN27cyPwdlwaCEwAAAPCEcHNzU2JioiQpJiZG+/bt08qVK7V48WLduHFDYWFhyp49u9auXav169fL09NT9evXt84zadIkvfvuu+rYsaN27dqlRYsWqVixYmmua/z48Vq0aJG+//577du3T998840CAwPT7JuQkKCwsDDlyJFDW7Zs0Zw5c7Rq1SqbUCZJq1ev1qFDh7R69WrNmDFD0dHRio6OzrT9czdcqgcAAAA85gzDUExMjFasWKEuXbro7Nmz8vDw0Jdffmm9RO/rr79WSkqKvvzyS1ksFklSVFSUfHx8FBsbq3r16umjjz7Se++9p27dulmXXaVKlTTXefz4cRUvXlzPPvusLBaLChUqdMf6Zs2apWvXrumrr76Sh4eHJGnChAlq3LixRowYIV9fX0lSjhw5NGHCBDk6OqpUqVJq1KiRYmJi1KFDh0zZT3fDGScAAADgMbV48WJ5enrK1dVVDRo0UPPmzTVw4EBJUlBQkM19TTt27NDBgweVPXt2eXp6ytPTUzlz5tS1a9d06NAhxcXF6a+//lLdunXvad2tW7fW9u3bVbJkSXXt2lU//fTTHfvu3btXwcHB1tAkSdWrV1dKSor27dtnbXvqqafk6Ohofe7v76+4uLh73R33hTNOAAAAwGOqdu3amjRpkpydnZUvXz5ly/bvn/+3hxRJunz5sipVqqRvvvkm1XLy5MkjB4f0nXOpWLGijhw5omXLlmnVqlVq1qyZQkNDNXfu3IxtjCQnJyeb5xaLRSkpKRleXnoQnAAAAIDHlIeHxx3vQfqvihUravbs2cqbN6+8vLzS7BMYGKiYmBjVrl37npbp5eWl5s2bq3nz5nr11VdVv359nT9/Xjlz5rTpV7p0aUVHRyshIcEa6NavXy8HBwfrwBX2xqV6AAAAANSyZUvlzp1bL730ktauXasjR44oNjZWXbt21Z9//ilJGjhwoEaNGqXx48frwIED2rZtmz777LM0lzd69Gh9++23+uOPP7R//37NmTNHfn5+8vHxSXPdrq6uCg8P1+7du7V69Wp16dJFb731lvX+JnvjjBMAAACQTt/UXStJKlfAx76FZCJ3d3f98ssv6tOnj1555RVd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Nm3aqEyZMpo8ebLc3d01ffr0O86TnJysli1batCgQSpSpMhDrBYAAADAk8iuwSkxMVFbt25VaGiotc3BwUGhoaHauHHjHecbPHiw8ubNq3bt2pmu4/r167p48aLNAwAAAADSw67B6dy5c0pOTpavr69Nu6+vr06fPp3mPOvWrdO0adM0derUe1rHsGHD5O3tbX0EBATcd90AAAAAnix2v1QvPS5duqS33npLU6dOVe7cue9pnn79+ik+Pt76OHHixAOuEgAAAMDjJps9V547d245OjrqzJkzNu1nzpyRn59fqv6HDh3S0aNH1bhxY2tbSkqKJClbtmzat2+fihYtajOPi4uLXFxcHkD1AAAAAJ4Udj3j5OzsrEqVKikmJsbalpKSopiYGIWEhKTqX6pUKe3atUvbt2+3Pl588UXVrl1b27dv5zI8AAAAAA+EXc84SVLPnj0VHh6uypUrq2rVqho7dqwSEhLUpk0bSVKrVq2UP39+DRs2TK6uripbtqzN/D4+PpKUqh0AAAAAMovdg1Pz5s119uxZDRgwQKdPn1b58uW1fPly64ARx48fl4PDI3UrFgAAAIDHjN2DkyRFREQoIiIizWmxsbF3nTc6OjrzCwIAAACA23AqBwAAAABMEJwAAAAAwATBCQAAAABMEJwAAAAAwATBCQAAAABMEJwAAAAAwATBCQAAAABMEJwAAAAAwATBCQAAAABMEJwAAAAAwATBCQAAAABMEJwAAAAAwATBCQAAAABMEJwAAAAAwATBCQAAAABMEJwAAAAAwATBCQAAAABMEJwAAAAAwATBCQAAAABMEJwAAAAAwATBCQAAAABMEJwAAAAAwATBCQAAAABMEJwAAAAAwATBCQAAAABMEJwAAAAAwATBCQAAAABMEJwAAAAAwATBCQAAAABMEJwAAAAAwATBCQAAAABMEJwAAAAAwATBCQAAAABMEJwAAAAAwATBCQAAAABMEJwAAAAAwATBCQAAAABMEJwAAAAAwATBCQAAAABMEJwAAAAAwATBCQAAAABMEJwAAAAAwATBCQAAAABMEJwAAAAAwATBCQAAAABMEJwAAAAAwATBCQAAAABMEJwAAAAAwATBCQAAAABMEJwAAAAAwATBCQAAAABMEJwAAAAAwATBCQAAAABMEJwAAAAAwATBCQAAAABMEJwAAAAAwATBCQAAAABMEJwAAAAAwATBCQAAAABMEJwAAAAAwATBCQAAAABMEJwAAAAAwATBCQAAAABMEJwAAAAAwATBCQAAAABMEJwAAAAAwATBCQAAAABMEJwAAAAAwATBCQAAAABMEJwAAAAAwATBCQAAAABMEJwAAAAAwATBCQAAAABMEJwAAAAAwATBCQAAAABMEJwAAAAAwATBCQAAAABMEJwAAAAAwATBCQAAAABMEJwAAAAAwATBCQAAAABMZIngNHHiRAUGBsrV1VXVqlXT5s2b79h36tSpqlGjhnLkyKEcOXIoNDT0rv0BAAAA4H7ZPTjNnj1bPXv2VGRkpLZt26bg4GCFhYUpLi4uzf6xsbFq0aKFVq9erY0bNyogIED16tXTyZMnH3LlAAAAAJ4Udg9Oo0ePVocOHdSmTRuVKVNGkydPlru7u6ZPn55m/2+++UadO3dW+fLlVapUKX355ZdKSUlRTEzMQ64cAAAAwJPCrsEpMTFRW7duVWhoqLXNwcFBoaGh2rhx4z0t48qVK7px44Zy5syZ5vTr16/r4sWLNg8AAAAASA+7Bqdz584pOTlZvr6+Nu2+vr46ffr0PS2jT58+ypcvn034ut2wYcPk7e1tfQQEBNx33QAAAACeLHa/VO9+DB8+XN99950WLFggV1fXNPv069dP8fHx1seJEycecpUAAAAAHnXZ7Lny3Llzy9HRUWfOnLFpP3PmjPz8/O4676effqrhw4dr1apVKleu3B37ubi4yMXFJVPqBQAAAPBksusZJ2dnZ1WqVMlmYIdbAz2EhITccb6RI0dqyJAhWr58uSpXrvwwSgUAAADwBLPrGSdJ6tmzp8LDw1W5cmVVrVpVY8eOVUJCgtq0aSNJatWqlfLnz69hw4ZJkkaMGKEBAwZo1qxZCgwMtN4L5enpKU9PT7ttBwAAAIDHl92DU/PmzXX27FkNGDBAp0+fVvny5bV8+XLrgBHHjx+Xg8O/J8YmTZqkxMREvfrqqzbLiYyM1MCBAx9m6QAAAACeEHYPTpIUERGhiIiINKfFxsbaPD969OiDLwgAAAAAbvNIj6oHAAAAAA8DwQkAAAAATBCcAAAAAMAEwQkAAAAATBCcAAAAAMAEwQkAAAAATBCcAAAAAMAEwQkAAAAATBCcAAAAAMAEwQkAAAAATBCcAAAAAMAEwQkAAAAATBCcAAAAAMAEwQkAAAAATBCcAAAAAMAEwQkAAAAATBCcAAAAAMAEwQkAAAAATBCcAAAAAMAEwQkAAAAATBCcAAAAAMAEwQkAAAAATBCcAAAAAMAEwQkAAAAATBCcAAAAAMAEwQkAAAAATBCcAAAAAMAEwQkAAAAATBCcAAAAAMAEwQkAAAAATBCcAAAAAMAEwQkAAAAATBCcAAAAAMAEwQkAAAAATBCcAAAAAMAEwQkAAAAATBCcAAAAAMAEwQkAAAAATBCcAAAAAMAEwQkAAAAATBCcAAAAAMAEwQkAAAAATBCcAAAAAMAEwQkAAAAATBCcAAAAAMAEwQkAAAAATBCcAAAAAMAEwQkAAAAATBCcAAAAAMAEwQkAAAAATBCcAAAAAMAEwQkAAAAATBCcAAAAAMAEwQkAAAAATBCcAAAAAMAEwQkAAAAATBCcAAAAAMAEwQkAAAAATBCcAAAAAMAEwQkAAAAATBCcAAAAAMAEwQkAAAAATBCcAAAAAMAEwQkAAAAATBCcAAAAAMAEwQkAAAAATBCcAAAAAMAEwQkAAAAATBCcAAAAAMAEwQkAAAAATBCcAAAAAMAEwQkAAAAATBCcAAAAAMAEwQkAAAAATBCcAAAAAMAEwQkAAAAATBCcAAAAAMAEwQkAAAAATBCcAAAAAMAEwQkAAAAATBCcAAAAAMBElghOEydOVGBgoFxdXVWtWjVt3rz5rv3nzJmjUqVKydXVVUFBQVq6dOlDqhQAAADAk8juwWn27Nnq2bOnIiMjtW3bNgUHByssLExxcXFp9t+wYYNatGihdu3a6bffflOTJk3UpEkT7d69+yFXDgAAAOBJYffgNHr0aHXo0EFt2rRRmTJlNHnyZLm7u2v69Olp9h83bpzq16+v3r17q3Tp0hoyZIgqVqyoCRMmPOTKAQAAADwpstlz5YmJidq6dav69etnbXNwcFBoaKg2btyY5jwbN25Uz549bdrCwsK0cOHCNPtfv35d169ftz6Pj4+XJF28ePE+q888Kdev2LuEO7poMexdwh0lX022dwl3lJV+vx4lHAsZk5WPBYnjIaM4HjImKx8PHAsZx/GQMRwP5m7VYRjmP0e7Bqdz584pOTlZvr6+Nu2+vr76448/0pzn9OnTafY/ffp0mv2HDRumQYMGpWoPCAjIYNVPFm97F3BXe+1dwB15v5O19xzSL2v/RLPusSBxPDyOsvZPNOseDxwLj6es/VPleLhXly5dkrf33Wuya3B6GPr162dzhiolJUXnz59Xrly5ZLFY7FjZk+XixYsKCAjQiRMn5OXlZe9yALvieAD+xfEA3MSxYB+GYejSpUvKly+faV+7BqfcuXPL0dFRZ86csWk/c+aM/Pz80pzHz88vXf1dXFzk4uJi0+bj45PxonFfvLy8eDEA/j+OB+BfHA/ATRwLD5/ZmaZb7Do4hLOzsypVqqSYmBhrW0pKimJiYhQSEpLmPCEhITb9JWnlypV37A8AAAAA98vul+r17NlT4eHhqly5sqpWraqxY8cqISFBbdq0kSS1atVK+fPn17BhwyRJ3bp1U82aNTVq1Cg1atRI3333nX799Vd98cUX9twMAAAAAI8xuwen5s2b6+zZsxowYIBOnz6t8uXLa/ny5dYBII4fPy4Hh39PjD3zzDOaNWuWPvjgA/Xv31/FixfXwoULVbZsWXttAu6Bi4uLIiMjU102CTyJOB6Af3E8ADdxLGR9FuNext4DAAAAgCeY3b8AFwAAAACyOoITAAAAAJggOAEAAACACYLTYyQwMFBjx47N8PzR0dF8x9Ud3O++xePBYrFo4cKF9i4DyBLS87rIayiAxwHB6SFp3bq1mjRp8kDXsWXLFnXs2PGe+qb1Jta8eXPt378/w+uPjo6WxWKRxWKRg4OD/P391bx5cx0/fjzDy8wq0rNv8eC0bt3a+jvm5OSkwoUL6/3339e1a9fsXdoDdft23/44ePCgXWt60K9pSL//HiO+vr56/vnnNX36dKWkpGTqutLzuvigX0PvdIzcegQGBj6wdQN3ktbr5Ny5c+Xq6qpRo0ZZf2+HDx9u02fhwoWyWCzW57GxsbJYLHrqqaeUnJxs09fHx0fR0dEPahPwHwSnx0iePHnk7u6e4fnd3NyUN2/e+6rBy8tLp06d0smTJzVv3jzt27dPr7322n0t817cuHHjgS7/fvctMk/9+vV16tQpHT58WGPGjNGUKVMUGRlp77IeuFvbffujcOHCGVpWYmJiJleHrOTW78rRo0e1bNky1a5dW926ddMLL7ygpKSkTFtPel4XH/Rr6Lhx42yODUmKioqyPt+yZYtNf44B2MOXX36pli1batKkSXrvvfckSa6urhoxYoT++ecf0/kPHz6sr7766kGXibsgOGURa9asUdWqVeXi4iJ/f3/17dvX5g3u0qVLatmypTw8POTv768xY8aoVq1a6t69u7XP7WeRDMPQwIEDVbBgQbm4uChfvnzq2rWrJKlWrVo6duyYevToYf00Tkr7Ur0ff/xRVapUkaurq3Lnzq2XX375rtthsVjk5+cnf39/PfPMM2rXrp02b96sixcvWvv88MMPqlixolxdXVWkSBENGjTIZlv/+OMPPfvss3J1dVWZMmW0atUqm0ukjh49KovFotmzZ6tmzZpydXXVN998I+nmi1Lp0qXl6uqqUqVK6fPPP7cuNzExUREREfL395erq6sKFSpk/WLlu+2v/+5b6eb3i7300kvy9PSUl5eXmjVrpjNnzlinDxw4UOXLl9fMmTMVGBgob29vvf7667p06dJd9x/Mubi4yM/PTwEBAWrSpIlCQ0O1cuVK6/S///5bLVq0UP78+eXu7q6goCB9++23NsuoVauWunbtqvfff185c+aUn5+fBg4caNPnwIEDeu6556y/h7ev45Zdu3apTp06cnNzU65cudSxY0ddvnzZOv3Wp41Dhw6Vr6+vfHx8NHjwYCUlJal3797KmTOnChQooKioqHve7tsfjo6OksxfP2rVqqWIiAh1795duXPnVlhYmCRp9+7datCggTw9PeXr66u33npL586ds843d+5cBQUFWbcvNDRUCQkJGjhwoGbMmKEffvjB+hoSGxtrug14OG79ruTPn18VK1ZU//799cMPP2jZsmU2n0xfuHBB7du3V548eeTl5aU6depox44dNsu623vAvb7n/LevlPmvod7e3jbHhnTzk/hbz6tUqaIhQ4aoVatW8vLysp79WrdunWrUqCE3NzcFBASoa9euSkhIsC73+vXr6tWrl/Lnzy8PDw9Vq1aN33VkyMiRI9WlSxd99913atOmjbU9NDRUfn5+1r9H7qZLly6KjIzU9evXH2SpuAuCUxZw8uRJNWzYUFWqVNGOHTs0adIkTZs2TR999JG1T8+ePbV+/XotWrRIK1eu1Nq1a7Vt27Y7LnPevHnWT+MPHDighQsXKigoSJI0f/58FShQQIMHD7b5dO6/lixZopdfflkNGzbUb7/9ppiYGFWtWvWetysuLk4LFiyQo6Oj9Q+8tWvXqlWrVurWrZt+//13TZkyRdHR0fr4448lScnJyWrSpInc3d21adMmffHFF/rf//6X5vL79u2rbt26ae/evQoLC9M333yjAQMG6OOPP9bevXs1dOhQffjhh5oxY4Ykafz48Vq0aJG+//577du3T99884318o277a//SklJ0UsvvaTz589rzZo1WrlypQ4fPqzmzZvb9Dt06JAWLlyoxYsXa/HixVqzZk2q0/G4P7t379aGDRvk7Oxsbbt27ZoqVaqkJUuWaPfu3erYsaPeeustbd682WbeGTNmyMPDQ5s2bdLIkSM1ePBgazhKSUnRK6+8ImdnZ23atEmTJ09Wnz59bOZPSEhQWFiYcuTIoS1btmjOnDlatWqVIiIibPr9/PPP+uuvv/TLL79o9OjRioyM1AsvvKAcOXJo06ZN6tSpk95++239+eefGdoH9/L6cWt7nZ2dtX79ek2ePFkXLlxQnTp1VKFCBf36669avny5zpw5o2bNmkmSTp06pRYtWqht27bau3evYmNj9corr8gwDPXq1UvNmjWzOQv2zDPPZKh+PBx16tRRcHCw5s+fb2177bXXFBcXp2XLlmnr1q2qWLGi6tatq/Pnz0tK33vAo/Aa+umnnyo4OFi//fabPvzwQx06dEj169dX06ZNtXPnTs2ePVvr1q2zOYYjIiK0ceNGfffdd9q5c6dee+011a9fXwcOHMhwHXjy9OnTR0OGDNHixYtTfQDt6OiooUOH6rPPPjN9H+jevbuSkpL02WefPchycTcGHorw8HDjpZdeSnNa//79jZIlSxopKSnWtokTJxqenp5GcnKycfHiRcPJycmYM2eOdfqFCxcMd3d3o1u3bta2QoUKGWPGjDEMwzBGjRpllChRwkhMTExznbf3vSUqKsrw9va2Pg8JCTFatmx5z9sYFRVlSDI8PDwMd3d3Q5Ihyejatau1T926dY2hQ4fazDdz5kzD39/fMAzDWLZsmZEtWzbj1KlT1ukrV640JBkLFiwwDMMwjhw5Ykgyxo4da7OcokWLGrNmzbJpGzJkiBESEmIYhmF06dLFqFOnjs1+viU9++unn34yHB0djePHj1un79mzx5BkbN682TAMw4iMjDTc3d2NixcvWvv07t3bqFatWprLx70JDw83HB0dDQ8PD8PFxcWQZDg4OBhz586963yNGjUy3nvvPevzmjVrGs8++6xNnypVqhh9+vQxDMMwVqxYYWTLls04efKkdfqyZctsfg+/+OILI0eOHMbly5etfZYsWWI4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\n"
          },
          "metadata": {}
        }
      ]
    }
  ],
  "metadata": {
    "kernelspec": {
      "display_name": "Python 3 (ipykernel)",
      "language": "python",
      "name": "python3"
    },
    "language_info": {
      "codemirror_mode": {
        "name": "ipython",
        "version": 3
      },
      "file_extension": ".py",
      "mimetype": "text/x-python",
      "name": "python",
      "nbconvert_exporter": "python",
      "pygments_lexer": "ipython3",
      "version": "3.11.1"
    },
    "toc": {
      "base_numbering": 1,
      "nav_menu": {},
      "number_sections": true,
      "sideBar": true,
      "skip_h1_title": false,
      "title_cell": "Table of Contents",
      "title_sidebar": "Contents",
      "toc_cell": false,
      "toc_position": {},
      "toc_section_display": true,
      "toc_window_display": true
    },
    "varInspector": {
      "cols": {
        "lenName": 16,
        "lenType": 16,
        "lenVar": 40
      },
      "kernels_config": {
        "python": {
          "delete_cmd_postfix": "",
          "delete_cmd_prefix": "del ",
          "library": "var_list.py",
          "varRefreshCmd": "print(var_dic_list())"
        },
        "r": {
          "delete_cmd_postfix": ") ",
          "delete_cmd_prefix": "rm(",
          "library": "var_list.r",
          "varRefreshCmd": "cat(var_dic_list()) "
        }
      },
      "types_to_exclude": [
        "module",
        "function",
        "builtin_function_or_method",
        "instance",
        "_Feature"
      ],
      "window_display": false
    },
    "colab": {
      "provenance": []
    }
  },
  "nbformat": 4,
  "nbformat_minor": 0
}